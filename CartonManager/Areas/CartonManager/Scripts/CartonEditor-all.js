///#source 1 1 /Areas/CartonManager/Scripts/CartonEditor.partial.js
/// <reference path="../../../Scripts/jquery-1.6.2-vsdoc.js" />
///Script used by Carton Editor.

$(document).ready(function () {
    $('#btnUpdate,#btnReset,#btnGo,#btnRemove,#btnRefresh').button();
    $('#tbIrregular').val('');
    $('#tbSample').val('');
    $('#tbScan').focus();
    $('#cbRemovePallet').removeAttr('checked');




    // Check box to delete empty carton is checked by default.
    $('#cbEmptyCarton').attr('checked', 'checked');

    // Created tabs for editing carton properties and removing irregular, sample pieces.
    $('#divTabs').tabs({
        create: function (event, ui) {
            $(this).tabs('option', 'selected', parseInt($(this).attr('data-selected-index')));
        }
    });


    //Assign value of selected printer id in hidden fileds existing in both forms.
    $('#ddlPrinter').change(function (e) {
        var printerId = $('#ddlPrinter').val();
        $('#hfPrinter, #hfrPrinter').val(printerId);
    });
    // Enable disable the associated radio buttons
    $('#cbqUpdateReworkStatus').change(function (e) {
        var checked = $(this).is(':checked');
        if (checked) {
            $('#rbuCompleteRework,#rbuNotSet').removeAttr('disabled').eq(0).attr('checked', 'checked');
        } else {
            $('#rbuCompleteRework,#rbuNotSet').attr('disabled', 'disabled').removeAttr('checked');
        }
    });

    $('#tbSetPieces').change(function () {
        $('#spPieces').show();
    });
    $('#tbUpdateSKU').change(function () {
        $('#spSku').show();
        // Clear the style,color... info being displayed next to the input box.
        var upc = $(this).val();
        $(this).autocompleteEx('clear');
        $(this).val(upc);
    }).bind('autocompleteselect', function (event, ui) {
        $('#hfSkuDescription').val(ui.item.label);
    });
    $('#ddlUpdateQuality').change(function () {
        $('#spQualityCode').show();
    });
    $('#ddlUpdateVwhId').change(function () {
        $('#spVwh').show();
    });
    $('#ddlPriceSeasonCode').change(function () {
        $('#spSeasonCode').show();
    });

    //Support eneter button on tbScan
    $('#tbScan').keydown(function (e) {
        if (e.keyCode === $.ui.keyCode.ENTER) {
            $(this).closest('form').submit();
        }
    });

    $('#btnReset').click(function () {
        $('#spQualityCode').hide();
        $('#spPieces').hide();
        $('#spVwh').hide();
        $('#spSeasonCode').hide();
        $('#spSku').hide();
        $('#cbRemovePallet').removeAttr('checked');
        $('#tbPallet').val('');
        $('#spnPalletInfo').html('');
    });

    // Allow enter press on tbPallet. Id tbPallet is generated by editor template it self.
    $('#tbPallet').keydown(function (e) {
        if (e.keyCode === $.ui.keyCode.ENTER && $(this).val()) {
            $('#tbUpdateSKU').focus();
            return false;
        }
    });

    $('#cbRemovePallet').change(function (e) {
        var checked = $(this).is(':checked');
        if (checked) {
            $('#tbPallet').attr('disabled', 'disabled');
        }
        else {
            $('#tbPallet').removeAttr('disabled');

        }

    });

}).keydown(function (e) {
    // Don't submit the page when enter is pressed
    if (e.keyCode === $.ui.keyCode.ENTER) {
        e.preventDefault();
    }
});
function PlaySound(file) {
    // alert(file);
    try {
        $('#sound_' + file)[0].play();
    }
    catch (e) {
        // No plugin available? Browser does not support HTML5? Ignore the error
    }
    //    var $embed = $('embed', $sound).removeAttr('autostart').attr('autostart', true);
    //    $sound.children('span:first').html($embed[0].outerHTML);
}


//$Id$

///#source 1 1 /Areas/CartonManager/Scripts/AutoComplete.partial.js
/// <reference path="../../../Scripts/jquery-1.6.2-vsdoc.js" />
// $Id$

/*
Generic autocomplete script to be used in conjunction with autocomplete helpers
*/

(function ($) {
    // Static variable which keeps track of the number of autocomplete widgets created.
    //var __count = 0;
    $.widget("ui.autocompleteEx", $.ui.autocomplete, {

        widgetEventPrefix: 'autocomplete',

        // Called once when the autocomplete is associated with the input element
        _create: function() {
            // Default options
            var self = this;
            this.options.source = function(request, response) {
                $.ajax({
                        url: self.element.attr('data-ac-list-url'),
                        dataType: 'json',
                        data: { term: request.term },
                        success: function(data, textStatus, jqXHR) {
                            response(data);
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            // Error encountered during the remote call. Just show some diagnostic. If this happens, system becomes unstable
                            alert(jqXHR.responseText);
                        }
                    });
            };
            this.options.autoFocus = false;
            this.options.delay = 2000;
            this.options.minLength = 2;

            // Call base class
            $.ui.autocomplete.prototype._create.apply(this, arguments);


            this.element.dblclick(function(e) {
                // Double clicking will unconditionally open the drop down
                var oldMinLength = self.options.minLength;
                self.options.minLength = 0;
                self.search();
                self.options.minLength = oldMinLength;
            });
            var valUrl = self.element.attr('data-ac-validate-url');
            if (valUrl) {
                this.element.rules('add', {
                    // remote validation of scanned bar code
                    remote: {
                        url: self.element.attr('data-ac-validate-url'),
                        //context: self,

                        // We need to immediately know whether the input is valid so that the form can be reliably posted
                        async: false,

                        dataType: 'json',
                        beforeSend: function(jqXHR, settings) {
                            self.element.addClass('ui-autocomplete-loading');
                        },
                        dataFilter: function(data, type) {
                            // Grab the chance to update textbox, hidden field and description
                            var json = $.parseJSON(data);
                            if ($.isPlainObject(json)) {
                                // Success. data is the autocomplete object
                                self._selectValue(json);
                                return JSON.stringify(true);
                            } else {
                                // Failure. data is the error message. Clear previous description if any.
                                var x = $.validator.format("span[data-ac-msg-for='{0}']", self.element.attr('name'));
                                $(x).empty();
                                return data;
                            }
                        },
                        complete: function(jqXHR, settings) {
                            self.element.removeClass('ui-autocomplete-loading');
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            // Error encountered during the remote call. Just show some diagnostic. If this happens, system becomes unstable
                            alert(jqXHR.responseText);
                        }
                    }
                });
            }
        },

        /* Special handle the select event. */
        _trigger: function(type, event, ui) {
            var b = $.ui.autocomplete.prototype._trigger.apply(this, arguments);
            switch (type) {
            case 'select':
                this._selectValue(ui.item);
                    // Prevent the remote validator from trying to validate this value
                var validator = this.element.closest('form').validate();
                var prev = validator.previousValue(this.element[0]);
                prev.old = ui.item.shortName;
                prev.valid = true;
                return false;
                break;

            }
            return b;
        },

        /************** Private functions ******************/
        _selectValue: function(data) {
            // Textbox gets the short name
            this.element.val(data.shortName || data.value).removeClass('input-validation-error');

            // Hidden field just next to it gets the value
            this.element.prev('input:hidden').val(data.value);

            var name = this.element.attr('name');

            // Description span gets label
            var x = $.validator.format("span[data-ac-msg-for='{0}']", name);
            $(x).html(data.label);

            // Get rid of validation error
            x = $.validator.format("span[data-valmsg-for='{0}']", name);
            $(x).removeClass('field-validation-error').addClass('field-validation-valid');
        },

        /****************** Public functions *********************/
        // Clears the value in the control. The hidden field, description and error messages are cleared as well
        clear: function() {
            this._selectValue({ value: '', label: '', shortName: '' });

            // Make sure remote validator will perform the query again
            var validator = this.element.closest('form').validate();
            var prev = validator.previousValue(this.element[0]);
            prev.old = null;
            prev.valid = true;

        }
    });
})(jQuery);

$.validator.setDefaults({
    onkeyup: false,    // remote validation cannot tolerate validation on every keystroke
    onfocusout: false
});

$(document).ready(function () {
    $("input[data-ac-list-url]").autocompleteEx();
});



///#source 1 1 /Areas/CartonManager/Scripts/DestPallet.partial.js
/// <reference path="~/Scripts/jquery-1.6.2-vsdoc.js" />

//Validates destination Pallet. Treats enter as tab
$(document).ready(function () {
    $('#tbPallet').change(function (e) {
        if (!$(this).closest('form').validate().element($(this))) {
            return false;
        }
        $.ajax({
            url: $(this).attr('data-validate-url'),
            data: { palletId: $(this).val() },
            context: this,
            type: 'GET',
            cache: false,
            success: function (data, textStatus, jqXHR) {
                // Success. Display data as status
                PlaySound('success');
                $('#spnPalletInfo').html("<br/>" + data);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
            }
        });
    });
});


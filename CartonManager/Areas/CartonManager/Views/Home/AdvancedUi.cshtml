@model DcmsMobile.CartonManager.ViewModels.AdvancedUiViewModel
@{
    ViewBag.Title = "Update Cartons - Advanced";
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@using (Html.BeginForm(MVC_CartonManager.CartonManager.Home.UpdateCartonOrPallet(), FormMethod.Post, new
{
    id = "frmMain"
}))
{
    @Html.HiddenFor(m => m.ViewModelType)
    <audio id="sound_success" src="@Links_CartonManager.Areas.CartonManager.Content.Sounds.success_wav" >
        <span class="ui-state-highlight">Your browser will not play sounds. IE9 or higher is
            recommended. </span>
    </audio>
    <audio id="sound_error" src="@Links_CartonManager.Areas.CartonManager.Content.Sounds.Error_wav">
    </audio>
    <div>
        <div class="property-widget box">
            <h3>
                Qualifying Cartons</h3>
            <div id="divQualifyingProperties" class="boxContent">
                <p>
                    Scanned Cartons will be rejected if any of these conditions are not met.
                </p>
                <label for="ddlAreaId">
                    Must be in Area</label>
                @Html.GroupDropListFor(m => m.QualificationRules.AreaId, Model.AreaList, new
           {
               id = "ddlAreaId"
           })
                <br />
                <label for="tbQualifyingSKU">
                    Contains SKU</label>
                 @Html.HiddenFor(m => m.QualificationRules.SkuId)
                        @Html.TextBoxFor(m => m.QualificationRules.SkuBarCode, new Dictionary<string, object>
                           {
                                   {"data-ac-list-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.SkuAutocomplete())},
                                   {"data-ac-validate-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.ValidateSku())},
                                   {"id", "tbQualifyingSKU"}
                           })<sup>&darr;</sup>
                <span data-ac-msg-for='@Html.NameFor(m => m.QualificationRules.SkuBarCode)'></span>
                @Html.ValidationMessageFor(m => m.QualificationRules.SkuBarCode)
                <br />
                <label for="tbQualifyPieces">
                    Pieces in Carton</label>
                @Html.TextBoxFor(m => m.QualificationRules.Pieces, new { id = "tbQualifyPieces" , maxlength = "5" })
                @Html.ValidationMessageFor(m => m.QualificationRules.Pieces)
                <br />
                <label for="ddlQualifyingQuality">
                    Carton Quality</label>
                @Html.DropDownListFor(m => m.QualificationRules.QualityCode, Model.QualityList, "(Any)", new { id = "ddlQualifyingQuality" })
                <br />
                <label for="ddlQualifyingVwhId">
                    Virtual Warehouse</label>
                @Html.DropDownListFor(m => m.QualificationRules.VwhId, Model.VirutalWareHouseList, "(Any)", new { id = "ddlQualifyingVwhId" })
                <br />
                <label for="ddlQualifyingPriceSeasonCode">
                    Price Season</label>
                @Html.DropDownListFor(m => m.QualificationRules.PriceSeasonCode, Model.PriceSeasonCodeList, "Any", new { id = "ddlQualifyingPriceSeasonCode" })
            </div>
            <fieldset>
                <legend>
                    <input type="checkbox" id="cbqReworkStatus" />&nbsp;<label for="cbqReworkStatus">Check
                        Rework Status</label></legend>
                <p>
                    Cartons can be marked for rework by creating a conversion pull request.
                </p>
                <input type="radio" name="@Html.NameFor(m => m.QualificationRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.DoesNotNeedRework" id="rbqDoesNotNeedRework"
                    disabled="disabled" />
                <label for="rbqDoesNotNeedRework">
                    The Carton should <em>not</em> be marked for rework</label>
                <br />
                <input type="radio" name="@Html.NameFor(m => m.QualificationRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.NeedsRework" id="rbqNeedsRework" disabled="disabled" />
                <label for="rbqNeedsRework">
                    The Carton <em>should</em> be marked for rework</label>
            </fieldset>
        </div>
        <div class="property-widget box">
            <h3>
                Reason Code
            </h3>
            <div class="boxContent">
                @Html.DropDownListFor(m => m.UpdatingRules.ReasonCode, Model.ReasonCodeList, "(No Change)")
                <p>
                    This is required only if you are changing the contents of the Carton.
                </p>
            </div>
        </div>
        <div class="property-widget box">
            <h3>
                Update What?</h3>
            <div id="divUpdateProperties" class="boxContent">
                @Html.LabelFor(m => m.UpdatingRules.SkuBarCode)
                  @Html.HiddenFor(m => m.UpdatingRules.SkuId)
                        @Html.TextBoxFor(m => m.UpdatingRules.SkuBarCode, new Dictionary<string, object>
                           {
                                   {"data-ac-list-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.SkuAutocomplete())},
                                   {"data-ac-validate-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.ValidateSku())},
                                   {"id", "tbUpdateSKU"}
                           })<sup>&darr;</sup>
                <span data-ac-msg-for='@Html.NameFor(m => m.UpdatingRules.SkuBarCode)'></span>
                @Html.ValidationMessageFor(m => m.UpdatingRules.SkuId)
                <br />
                @Html.LabelFor(m => m.UpdatingRules.Pieces)
                @Html.TextBoxFor(m => m.UpdatingRules.Pieces, new { @class = "update-rule", id = "tbUpdatePieces" , maxlength = "5" })
                @Html.ValidationMessageFor(m => m.UpdatingRules.Pieces)
                <br />
                @Html.LabelFor(m => m.UpdatingRules.QualityCode)
                @Html.DropDownListFor(m => m.UpdatingRules.QualityCode, Model.QualityList, "(No Change)", new { @class = "update-rule", id = "ddlUpdateQuality" })
                @Html.ValidationMessageFor(m => m.UpdatingRules.QualityCode)
                <br />
                @Html.LabelFor(m => m.UpdatingRules.VwhId)
                @Html.DropDownListFor(m => m.UpdatingRules.VwhId, Model.VirutalWareHouseList, "(No Change)", new { @class = "update-rule", id = "ddlUpdateVwhId" })
                @Html.ValidationMessageFor(m => m.UpdatingRules.VwhId)
                <br />
                @Html.LabelFor(m => m.UpdatingRules.PriceSeasonCode)
                @Html.DropDownListFor(m => m.UpdatingRules.PriceSeasonCode, Model.PriceSeasonCodeList, "(No Change)", new { @class = "update-rule", id = "ddlPriceSeasonCode" })
                @Html.ValidationMessageFor(m => m.UpdatingRules.PriceSeasonCode)
                <fieldset>
                    <legend>
                        <input type="checkbox" id="cbqUpdateReworkStatus" class="update-rule" value="" />&nbsp;<label
                            for="cbqUpdateReworkStatus">Update Rework Status</label></legend>
                    <p>
                        If the Carton has been marked for rework, what would you like to do?
                    </p>
                    <input type="radio" name="@Html.NameFor(m => m.UpdatingRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.CompleteRework" id="rbuCompleteRework" disabled="disabled" />
                    <label for="rbuCompleteRework">
                        Mark Rework Complete</label>
                    <br />
                    <input type="radio" name="@Html.NameFor(m => m.UpdatingRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.DoesNotNeedRework" id="rbuNotSet" disabled="disabled" />
                    <label for="rbuNotSet">
                        Rework is no longer required on this Carton</label>
                </fieldset>
            </div>
        </div>
        <div class="property-widget">
            <h3>
                Move To</h3>
            <div class="boxContent" id="divMoveTo">
                @Html.CheckBoxFor(m => m.UpdatingRules.RemoveExistingPallet, new { @class = "update-rule", @value = "", id = "cbremoveFromPallet" })
                <span>Remove from existing Pallet</span>
                <br />
                <label>
                    Pallet</label>@Html.EditorFor(m => m.UpdatingRules.PalletId, MVC_CartonManager.CartonManager.Shared.Views.EditorTemplates.DestPallet)
                <br />
                @Html.LabelFor(m => m.UpdatingRules.AreaId)
                @Html.GroupDropListFor(m => m.UpdatingRules.AreaId, Model.AreaList, new
           {
               id = "gdlupdateArea",
               @class = "update-rule"
           })
                <br />
                @Html.LabelFor(m => m.UpdatingRules.LocationID)
                @Html.TextBoxFor(m => m.UpdatingRules.LocationID, new { @class = "update-rule" , maxlength = "20" })
                @Html.ValidationMessageFor(m => m.UpdatingRules.LocationID)
                <br />
                <span class="ui-priority-secondary">Location ID is required when the <em>Destination
                    Area</em> is a numbered area.</span>
                <input name="multifield" id="tbMultiField" type="hidden" />
                @Html.ValidationMessage("multifield")
            </div>
        </div>
        <div class="property-widget">
            <h3>
                Select Printer</h3>
            <div class="boxContent">
                @Html.LabelFor(m => m.PrinterId)
                @Html.DropDownListFor(m => m.PrinterId, Model.PrinterList, DcmsMobile.CartonManager.Resources.CartonManagerResource.ddl_Donot_Print)
            </div>
        </div>
    </div>    
}
<div class="ui-helper-clearfix">
</div>
<button type="button" id="btnUpdate">
    Cartons...</button>
<div id="divUpdate">
    @using (Html.BeginForm(MVC_CartonManager.CartonManager.Home.UpdateCartonOrPallet(), FormMethod.Post))
    {
        @Html.HiddenFor(m => m.ConfirmScanText, new { id = "tbConfirm" })
        <div>
            @Html.LabelFor(m => m.ScanText)
            @Html.TextBoxFor(m => m.ScanText, new
       {
           id = "tbScan",
           style = "text-transform: uppercase;"           
       })
            @Html.ValidationMessageFor(m => m.ScanText)
        </div> 
        <p>
            Scanning a Pallet will ask for confirmation and update all Cartons on the Pallet
        </p>       
        <div id="ajaxErrors">
            @Html.ValidationSummary()
        </div>
    }
</div>
@section scripts{
    <script src="@Links_CartonManager.Areas.CartonManager.Scripts.AdvanceUi_all_js" type="text/javascript"></script>
}
@*$Id$*@
@using DcmsMobile.CartonManager.ViewModels
@model DcmsMobile.CartonManager.ViewModels.CartonEditorViewModel
@{
    ViewBag.Title = "Carton Editor";
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    var viewName = Path.GetFileNameWithoutExtension(((RazorView)this.ViewContext.View).ViewPath);
}
@Html.StatusSummary()
@Html.ValidationSummary()
@using (Html.BeginForm(MVC_CartonManager.CartonManager.Home.CartonEditor(), FormMethod.Get))
{
    
    <div class="boxContent">
        Scan carton to edit
        @Html.TextBoxFor(m => m.ScanText, new { id = "tbScan" })
        <button type="submit" id="btnGo">
            Go</button>
        @if (!string.IsNullOrEmpty(Model.UrlInquiryCarton))
        {
            <a href='@Model.UrlInquiryCarton' target ="_blank">Carton detail</a>
            <br />
        }
    </div>
   
   
}
@if (!string.IsNullOrEmpty(Model.ScanText))
{
    <div id="divTabs" data-selected-index="@Model.SelectedTab">
        <div class="boxContent">
            @Html.LabelFor(m => m.PrinterId)
            @Html.DropDownListFor(m => m.PrinterId, Model.PrinterList, DcmsMobile.CartonManager.Resources.CartonManagerResource.ddl_Donot_Print, new { id = "ddlPrinter" })
        </div>
        <br />
        <ul>
            <li><a href="#divEdit">Edit</a></li>
            <li><a href="#divRemove">Remove Pieces</a></li>
        </ul>
        <div id="divEdit">
            @using (Html.BeginForm(MVC_CartonManager.CartonManager.Home.UpdateCartonOrPallet(), FormMethod.Post, new { id = "frmMain" }))
            {
                <audio id="sound_success" src="@Links_CartonManager.Areas.CartonManager.Content.Sounds.success_wav" >
                    <span class="ui-state-highlight">Your browser will not play sounds. IE9 or higher is
                        recommended. </span>
                </audio>
                <audio id="sound_error" src="@Links_CartonManager.Areas.CartonManager.Content.Sounds.Error_wav">
                </audio>
                @Html.HiddenFor(m => m.ViewModelType)
                @Html.HiddenFor(m => m.ScanText)
                @Html.HiddenFor(m => m.PrinterId, new { id = "hfPrinter" })
                <input type="hidden" name="@Html.NameFor(m => m.SelectedTab)" value="0"/>
                <input type="hidden" value="@Model.ViewModelType" name="@Html.NameFor(m => m.ViewModelType)" />
                <input type="hidden" value="@viewName" name="@Html.NameFor(m => m.ViewName)" />
                <div style="width: 40em" class="property-widget box">
                    <h3>Properties of scanned Carton @Html.DisplayFor(m => m.ScanText)</h3>
                    <div id="divUpdateProperties" class="boxContent">
                        <input type="hidden" value="@Model.QualificationRules.IsReserved.ToString()" name="@Html.NameFor(m => m.QualificationRules.IsReserved)" />
                        @if (Model.QualificationRules.IsReserved)
                        {
                            <div class="ui-state-highlight">
                                Carton is reserved
                            </div>
                        }
                        @Html.LabelFor(m => m.UpdatingRules.LocationID)
                        @(string.IsNullOrEmpty(Model.UpdatingRules.LocationID) ? "No Location" : Model.UpdatingRules.LocationID)<br />
                        @Html.LabelFor(m => m.ShortName)
                        @Html.DisplayFor(m => m.ShortName)<br />
                        <label>
                            Pallet</label>
                        @Html.EditorFor(m => m.DestinationPalletId, MVC_CartonManager.CartonManager.Shared.Views.EditorTemplates.DestPallet)

                        <br />
                        @Html.CheckBoxFor(m => m.UpdatingRules.RemoveExistingPallet, new { id = "cbRemovePallet" })
                        <span>Remove from existing pallet</span>
                        <br />
                        @Html.HiddenFor(m => m.UpdatingRules.SkuBarCode)
                        @Html.LabelFor(m => m.UpdatingRules.SkuBarCode)
                        @Html.HiddenFor(m => m.UpdatingRules.SkuId)
                        @Html.TextBoxFor(m => m.UpdatingRules.SkuBarCode, new Dictionary<string, object>
                           {
                                   {"data-ac-list-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.SkuAutocomplete())},
                                   {"data-ac-validate-url", Url.Action(MVC_CartonManager.CartonManager.AutoComplete.ValidateSku())},
                                   {"id", "tbUpdateSKU"}
                           })<sup>&darr;*</sup>
                        <span data-ac-msg-for='@Html.NameFor(m => m.UpdatingRules.SkuBarCode)'></span>
                        @Html.HiddenFor(m => m.SkuDescription, new
                           {
                               id = "hfSkuDescription"
                           })
                        @Html.ValidationMessageFor(m => m.UpdatingRules.SkuId)
                        <span id="spSku" class="ui-state-active" style="display: none">
                            <br />
                            Old SKU <strong>@Html.DisplayFor(m => m.SkuDescription)</strong></span>
                        <br />
                        @Html.LabelFor(m => m.UpdatingRules.QualityCode)
                        @Html.DropDownListFor(m => m.UpdatingRules.QualityCode, Model.QualityList, new { id = "ddlUpdateQuality" })
                        <span id="spQualityCode" class="ui-state-active" style="display: none">Old Quality <strong>@Html.DisplayFor(m => m.UpdatingRules.QualityCode)</strong></span>
                        @Html.ValidationMessageFor(m => m.UpdatingRules.QualityCode)
                        <br />
                        @Html.LabelFor(m => m.UpdatingRules.VwhId)
                        @Html.DropDownListFor(m => m.UpdatingRules.VwhId, Model.VirutalWareHouseList, new { id = "ddlUpdateVwhId" })
                        <span id="spVwh" class="ui-state-active" style="display: none">Old Vwh <strong>@Html.DisplayFor(m => m.UpdatingRules.VwhId)</strong></span>
                        @Html.ValidationMessageFor(m => m.UpdatingRules.VwhId)
                        <br />
                        @Html.LabelFor(m => m.UpdatingRules.PriceSeasonCode)
                        @Html.DropDownListFor(m => m.UpdatingRules.PriceSeasonCode, Model.PriceSeasonCodeList, new { id = "ddlPriceSeasonCode" })
                        <span id="spSeasonCode" class="ui-state-active" style="display: none">Old Season Code
                            <strong>@Html.DisplayFor(m => m.UpdatingRules.PriceSeasonCode)</strong></span>
                        @Html.ValidationMessageFor(m => m.UpdatingRules.PriceSeasonCode)
                        <br />
                        @Html.LabelFor(m => m.UpdatingRules.Pieces)
                        @Html.TextBoxFor(m => m.UpdatingRules.Pieces, new { maxlength = "5" })
                        @Html.ValidationMessageFor(m => m.UpdatingRules.Pieces)
                        <span id="spPieces" class="ui-state-active" style="display: none">Old Pieces <strong>@Html.DisplayFor(m => m.UpdatingRules.Pieces)</strong></span>
                    </div>
                </div>
                <div style="width: 40em" class="property-widget box">
                    <input type="hidden" value="@Model.QualificationRules.Rework" name="@Html.NameFor(m => m.QualificationRules.Rework)" />
                    @if (Model.QualificationRules.Rework == ReworkStatus.NeedsRework)
                    { 
                        <strong>Carton marked for rework</strong>
                        <div class="boxContent">
                            <fieldset>
                                <legend>
                                    <input type="checkbox" id="cbqUpdateReworkStatus" value="" />&nbsp;<label for="cbqUpdateReworkStatus">Update
                                        Rework Status</label></legend>
                                <p>
                                    What would you like to do?
                                </p>
                                <input type="radio" name="@Html.NameFor(m => m.UpdatingRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.CompleteRework" id="rbuCompleteRework" disabled="disabled" />
                                <label for="rbuCompleteRework">
                                    Mark Rework Complete</label>
                                <br />
                                <input type="radio" name="@Html.NameFor(m => m.UpdatingRules.Rework)" value="@DcmsMobile.CartonManager.ViewModels.ReworkStatus.DoesNotNeedRework" id="rbuNotSet" disabled="disabled" />
                                <label for="rbuNotSet">
                                    Rework is no longer required on this carton</label>
                            </fieldset>
                        </div>
                    }
                </div>   
                <div class="ui-helper-clearfix">
                </div>         
                <button type="submit" id="btnUpdate">
                    Update</button>
                <button type="reset" id="btnReset">
                    Reset</button>
            }
        </div>
        <div id="divRemove">
            @using (Html.BeginForm(MVC_CartonManager.CartonManager.Home.RemovePieces(), FormMethod.Post))
            {
                <input type="hidden" name="@Html.NameFor(m => m.SelectedTab)" value="1"/>
                @Html.HiddenFor(m => m.ViewModelType)
                @Html.HiddenFor(m => m.ScanText)
                @Html.HiddenFor(m => m.BundleId)
                @Html.HiddenFor(m => m.PrinterId, new { id = "hfrPrinter" })
                @Html.HiddenFor(m => m.UpdatingRules.Pieces)
                <input type="hidden" value="@Model.ViewModelType" name="@Html.NameFor(m => m.ViewModelType)" />
                <input type="hidden" value="@viewName" name="@Html.NameFor(m => m.ViewName)" />
                <fieldset id="fldSetPieces">
                    <br />
                    <legend>
                        <label>
                            <strong>Pieces @Html.DisplayFor(m => m.UpdatingRules.Pieces)</strong></label>
                    </legend>
                    <fieldset>
                        <legend>@Html.RadioButtonFor(m => m.PiecesFlag, @DcmsMobile.CartonManager.ViewModels.PiecesRemoveFlag.Irregular)<label>Irregular</label></legend>
                        <label>
                            Transfer</label>
                        <input type="text" name="@Html.NameFor(m => m.IrregularPieces)" value="@Model.IrregularPieces" size="5"  maxlength="5" id="tbIrregular"/>
                        Pieces to @Html.DropDownListFor(m => m.IrregularAreaId, Model.IrregularAreaList, "(Please Select)")
                        <br />
                    </fieldset>
                    <br />
                    <fieldset>
                        <legend>@Html.RadioButtonFor(m => m.PiecesFlag, @DcmsMobile.CartonManager.ViewModels.PiecesRemoveFlag.Samples)
                            <label>
                                Samples</label></legend>
                        <label>
                            Transfer</label>
                        <input type="text" name="@Html.NameFor(m => m.SamplePieces)" value="@Model.SamplePieces" size="5"  maxlength="5" id="tbSample"/>
                        Pieces to @Html.DropDownListFor(m => m.SamplesAreaId, Model.SamplesAreaList, "(Please Select)")
                    </fieldset>
                    <br />
                    @Html.CheckBoxFor(m => m.EmptyCarton, new { id = "cbEmptyCarton" })
                    <span>Automatically delete carton if it becomes empty</span>
                </fieldset>
                <button type="submit" id="btnRemove">
                    Update</button>
                <button type="reset" id="btnRefresh">
                    Reset</button>
                    
            }
        </div>
    </div>
}
@section scripts{
    <script src="@Links_CartonManager.Areas.CartonManager.Scripts.CartonEditor_all_js" type="text/javascript"></script>
}
@*$Id$*@ 
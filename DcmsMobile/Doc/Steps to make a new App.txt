Creating a new MVC Application -- by Deepak Bhatt
15 Jul 2011: Updated by SS - Now creating MVC 3 application.


1. Steps to create a new solution at the path C\work\DcmsWeb.Receiving 
   Open Visual Studio -> File -> NewProject -> Other Project Types -> Visual Studio Solutions. 
   Choose Blank Solution.
   In Name field of the window, Write DcmsMobile.Receiving. Location should be C\work. Press Ok to create a new solution. 


2. Create a new MVC 3 empty application. Delete Folders Models, View and Controllers. At this point you will see that framework has added packages folder. Empty all the contents of this folder. Make sure you have an Internet connection before going ahead.
Go to Referances, right click and  select Add Library Package Referance. Install Jquery,Jquery.UI.Combined and T4MVC. 

3. Create a new area in the Receiving project. The name of the area must be your application name, e.g. Receiving

5. Go to Controllers and add a new controller named HomeController. Go to Views and create a new folder named Home, in Home folder right click and add a new view named Index.


9. In the ReceivingAreaRegistration class, modify the Route registration to look like this:
            context.MapRoute(
                "Receiving_default",
                "Receiving/{controller}/{action}/{id}",
                new { action = "Index", id = UrlParameter.Optional },
                new string[] { "DcmsMobile.Receiving.Controllers" }// Modify according to your namespace
            );
10 Go to Global.asax.cs and modify it in the following way

      routes.MapRoute(
                "Default", // Route name
                "{controller}/{action}/{id}", // URL with parameters
                new { controller = "Home", action = "Index", id = UrlParameter.Optional }, // Parameter defaults. 
                new string[] { "DcmsMobile.Receiving.Areas.Receiving.Controllers" } // Add Namespace of controller
            ).DataTokens.Add("area", "Receiving");





11. Add Eclipse Libraries to the solution inside C\work\DcmsWeb.Receiving in the follwoing way.
   DcmsMobile project: Check out from DcmsMobile\trunk\web and not from DcmsMobile\trunk.
   Add following libraries 
   EclipseLibrary.Mvc, EclipseLibrary.Core,EclipseLibrary.Oracle from trunk. 
   Cross check that all these projects are checked out to C\work\DcmsWeb.Receiving.

^/Libraries/packages packages
^/Libraries/EclipseLibrary.Core/trunk EclipseLibrary.Core
^/Libraries/EclipseLibrary.Oracle/trunk EclipseLibrary.Oracle
^/Libraries/EclipseLibrary.Mvc/trunk EclipseLibrary.Mvc
^/Projects/Mvc/DcmsMobile/trunk/DcmsMobile DcmsMobile



8. If you want Your application to be visible in DcmsMobile Project the do the follwoing.

a) Making the application visible in the DcmsMobile Menu
-----------------------------------------------------
The application will be visible in the menu only after you implement the EclipseLibrary.Mvc.Areas.IPluggableArea interface as follows:

        public override void RegisterArea(AreaRegistrationContext context)
        {
            context.MapRoute(
                "Receiving_default",
                "Receiving/{controller}/{action}/{id}",
                new { action = "Index", id = UrlParameter.Optional }
            );
            RegisteredAreas.PluggableAreas.Add(this);
        }

        public string DisplayName
        {
            get { return "Receiving"; }
        }

        public int DisplayOrder
        {
            get { return 100; }
        }

        public IEnumerable<ScanHandlingResult> HandleScan(string scan, string scanType, UrlHelper helper)
        {
            return null;
        }


b) Add DcmsMobile Project from repository and add following to Build Events -> Post-build event command line

@echo Deleting "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)"
rmdir /S /Q "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)"
@echo Copying to "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)"
xcopy /Y /S /F /I "$(ProjectDir)Areas\$(ProjectName)\Views\*.*" "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)\Views"
xcopy /Y /S /F /I "$(ProjectDir)Areas\$(ProjectName)\Content\*.*" "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)\Content"
xcopy /Y /S /F /I "$(ProjectDir)Areas\$(ProjectName)\Scripts\*.*" "$(SolutionDir)DcmsMobile\Areas\$(ProjectName)\Scripts"
xcopy /Y "$(TargetDir)$(TargetFileName)" "$(SolutionDir)DcmsMobile\bin"


Running your application independently
--------------------------------------
Change to global.asax:

        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            // By default show the area home page
            // http://www.dondevelopment.com/2011/02/09/asp-net-mvc-2-default-route-to-area/
            routes.MapRoute(
                "Default", // Route name
                "{controller}/{action}/{id}", // URL with parameters
                new { controller = "Home", action = "Index", id = UrlParameter.Optional, area="Dummy" }, // Parameter defaults
                new string[] { "MvcApplication1.Areas.Dummy.Controllers" }
            ).DataTokens.Add("area", "Dummy");

        }

-----------------T4MVC
// The prefix used for things like MVC.Dinners.Name and MVC.Dinners.Delete(Model.DinnerID)
const string HelpersPrefix = "MVC_Repack";

static bool GenerateMvcT4Extensions = false;

// If true, the T4MVC action result interface will be generated
// If false, the namespace of the interface must be referenced in the 'ReferencedNamespaces' setting
static bool GenerateActionResultInterface = false;

// Set this to true if you *never* want view names to be fully qualified paths
// This may be needed if you are using Spark
static bool UseNonQualifiedViewNames = true;


// Folders containing static files for which links are generated (e.g. Links.Scripts.Map_js)
readonly string[] StaticFilesFolders = new string[] {
    "Scripts",
    "Content",
	"Areas"
};

// Static files to exclude from the generated links   
readonly string[] ExcludedStaticFileExtensions = new string[] {   
    ".cs" ,
	".cshtml" 
};

Sharad 29 Aug 2011
------------------
Conventions to be followed for new applications

* _ViewStart.cshtml must contain the line :
    this.ViewContext.HttpContext.Trace.Write("View Name", this.VirtualPath);
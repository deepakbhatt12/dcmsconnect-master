@model DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxViewModel
@{
    var hasEpc = Model.SkuWithEpc.Any(p => p.AllEpc.Any());
    Layout = MVC_Inquiry.Inquiry.SharedViews.Views._layoutInquiry;
    ViewBag.Title = string.Format("Box {0}", Model.Ucc128Id);
}

@section script {
    <script type="text/javascript">
        $(document).ready(function () {
            $("#btnPrintBox").click(function () {
                if ($('input:checkbox:checked', '#frmMain').length === 0) {
                    $('#error').text("*Please select label to print").addClass('text-danger');
                    return false;
                }
            });
        });
    </script>
}

@section applinks{
@if (Model.AuditList.Count > 0 || Model.SkuWithEpc.Count > 0)
{
    <li>
        <a  href="@Url.Action(MVC_Inquiry.Inquiry.BoxEntity.BoxExcel(Model.Ucc128Id))">
            <span class="glyphicon glyphicon-export"></span> Excel
        </a>
    </li>
}
    <li><a href="@Model.UrlManageVas"><span class="glyphicon glyphicon-new-window"></span> Manage VAS</a></li>
    <li><a href="@Model.UrlScanToPallet"><span class="glyphicon glyphicon-new-window"></span> Scan To Pallet</a></li>
}

@helper CancelBoxToolTip()
{
    switch (Model.StopProcessReason)
    {
        case DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Active:
            break;

        case DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Cancelled:
            @Html.Raw("This box has already been cancelled. There is no mechanism to uncancel it")
            break;

        case DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Transferred:
        @Html.Raw("This box has already been shipped and therefore it cannot be cancelled")
            break;
    }
}

<div class="container">   
    <h2 style="margin-top:0px">
        @if (Model.StopProcessReason == DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Cancelled)
        {
            <s> Box @Html.DisplayFor(m => m.Ucc128Id)</s>
        }
        else
        {
            <span>Box @Html.DisplayFor(m => m.Ucc128Id)</span>
        }
        <small>
            Pickslip
            <a href="@Url.Action(MVC_Inquiry.Inquiry.PickslipEntity.Pickslip(Model.PickslipId))">@Model.PickslipId</a>
        </small>       
    </h2>


    <ul class="list-group">
        <li class="list-group-item list-group-item-success">
            <div class="btn-group pull-right" title="@CancelBoxToolTip()">
                <button type="button" class="btn btn-primary dropdown-toggle btn-sm" data-toggle="dropdown"
                        @(Model.StopProcessDate.HasValue ? "disabled" : "")>
                    Cancel Box <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @if (Model.CanCancelBox)
                    {
                        <li role="presentation" style="text-align:center">
                            <form action="@Url.Action(MVC_Inquiry.Inquiry.BoxEntity.CancelBox())" method="post">
                                <input type="hidden" value="@Model.Ucc128Id" name="@MVC_Inquiry.Inquiry.BoxEntity.CancelBoxParams.id" />
                                <span>Sure?</span>&nbsp;
                                <button class="btn btn-primary" type="submit">Yes</button>
                            </form>
                        </li>
                    }
                    else
                    {
                        <li><a href="@Model.UrlLogin">Login with Role @Html.DisplayFor(m => m.ManagerRoleName)</a></li>
                    }
                </ul>
            </div>
            <p class="h5">
                @if (Model.PitchingEndDate.HasValue)
                {
                    <span class="text text-info">
                        &bull; Pitched
                        @Html.DisplayFor(m => m.PitchingEndDate)
                        @if (!string.IsNullOrWhiteSpace(Model.PickerNames))
                        {
                            <span>by @Html.DisplayFor(m => m.PickerNames)</span>
                        }
                    </span>
                }
                else
                {
                    <span class="text text-info">
                        &bull; Not Pitched
                    </span>
                }



                @if (Model.QcDate.HasValue)
                {
                    <span class="text text-info">
                        &bull;  Quality Check
                        @Html.DisplayFor(m => m.QcDate)
                        @if (!string.IsNullOrWhiteSpace(Model.RejectionCode))
                        {
                            <em>Rejected: @Html.DisplayFor(m => m.RejectionCode)</em>
                        }

                    </span>
                }

                @if (Model.ValidationDate.HasValue)
                {
                    <span class="text text-info">
                        &bull; Validated
                        @Html.DisplayFor(m => m.ValidationDate)
                    </span>
                }
                else
                {
                    <span class="text text-info">
                        &bull; Not Validated
                    </span>
                }


                @if (Model.StopProcessReason == DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Active)
                {
                    if (Model.SuspenseDate.HasValue)
                    {
                        <span class="text text-info">
                            &bull; Suspense Date
                            @Html.DisplayFor(m => m.SuspenseDate)
                        </span>
                    }
                    else
                    {
                        <span class="text text-info">
                            &bull;Yet not sent to ERP
                        </span>
                    }
                }
                else
                {
                    <span class="text text-info">
                        @if (Model.StopProcessReason == DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Cancelled)
                        {
                            <text>&bull; Cancelled</text>
                        }
                        else if (Model.StopProcessReason == DcmsMobile.Inquiry.Areas.Inquiry.BoxEntity.BoxStatus.Transferred)
                        {
                            <text>&bull; Sent to ERP</text>
                        }
                        @Html.DisplayFor(m => m.StopProcessDate)
                    </span>
                }

            </p>

        </li>
        <li class="list-group-item">
            <small class="pull-right">
                <abbr title="Distribution Center">DC</abbr> @Html.DisplayFor(m => m.CustomerDc)
                &bull; Store @Html.DisplayFor(m => m.CustomerStore)
            </small>

            <h4 class="list-group-item-heading">
                @Html.ActionLink(Model.CustomerDisplayName, MVC_Inquiry.Inquiry.CustomerEntity.Customer(Model.CustomerId))
            </h4>
            <p class="list-group-item-text">
                @foreach (var line in Model.ToAddressLines)
                {
                    @line
                }
                @Model.City<strong> @Model.State</strong>
            </p>

        </li>
        <li class="list-group-item">
            <div class="btn-group pull-right">
                @if (!string.IsNullOrEmpty(Model.PalletId))
                {

                    <a href="@MVC_Inquiry.Inquiry.BoxEntity.BoxPallet(Model.PalletId)" class="btn">
                        Pallet @Html.DisplayFor(m => m.PalletId)
                    </a>
                }
                else
                {
                    <span class="btn">Not on Pallet</span>
                }
                <button type="button" class="btn btn-link dropdown-toggle" data-toggle="dropdown">
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li><a href="@Model.UrlScanToPallet"><span class="glyphicon glyphicon-new-window"></span> Scan To Pallet</a></li>
                </ul>
            </div>

            <h4 class="list-group-item-heading">
                Building @Html.DisplayFor(m => m.Building) : <a href="@Url.Action(MVC_Inquiry.Inquiry.SkuAreaEntity.SKUArea(Model.IaId))">
                    @Html.DisplayFor(m => m.AreaShortName) @Html.DisplayFor(m => m.IaShortDescription)
                </a>
                <small>
                    Tracking #
                    @Html.DisplayFor(m => m.ProNo)
                    &bull; RFID @(Model.RfidTagsRequired ? "Required" : "Not required")

                </small>

            </h4>
            <p class="list-group-item-text">
                @if (!string.IsNullOrWhiteSpace(Model.CartonId))
                {
                    <span>Carton</span>
                    <a href="@Url.Action(MVC_Inquiry.Inquiry.CartonEntity.Carton(Model.CartonId))">@Html.DisplayFor(m => m.CartonId)</a>
                }



                @for (var i = 0; i < Model.VasStatusList.Count; ++i)
                {
                    @Html.DisplayFor(m => m.VasStatusList[i].VasDescription)

                    if (Model.VasStatusList[i].IsComplete)
                    {
                        <span class="glyphicon glyphicon-ok"></span> <span>Completed</span>
                    }
                    else
                    {
                        <span>Not Complete</span>
                    }

                    if (!Model.VasStatusList[i].IsRequired)
                    {
                        <span><small>Not Required</small></span>
                    }

                }
                <a href="@Model.UrlManageVas"><span class="glyphicon glyphicon-new-window"></span> Manage VAS</a>
            </p>

        </li>

    </ul>


    <div class="navbar navbar-default" role="navigation">
        <div class="container-fluid bg-info">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#dlgPrint">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <span class="navbar-brand">Print Label</span>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="dlgPrint">
                <form class="navbar-form navbar-left" action="@Url.Action(MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCcl())" id="frmMain" method="post">
                    <input type="hidden" name="@MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCclParams.ucc128Id"
                           value="@Model.Ucc128Id" />
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" id="printCatalog" name='@MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCclParams.printCatalog' value="true" @Html.Raw(Model.CanPrintCatalog ? "" : "disabled") /> Catalog
                        </label>
                    </div>
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" name="@MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCclParams.printUcc" value="true" id="cbPrintUcc" /> UCC
                        </label>
                    </div>

                    <div class="checkbox">
                        <label>
                            <input type="checkbox" name='@MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCclParams.printCcl' value="true" id="cbPrintCcl" /> CCL
                        </label>

                    </div>
                    <div class="form-group">
                        <strong id="error"></strong>
                        @Html.DropDownListFor(m => m.PrinterId, Model.PrinterList, "Printer...", new
                    {
                        id = "ddlPrinter",
                        required = "required",
                        name = MVC_Inquiry.Inquiry.BoxEntity.PrintBoxUccOrCclParams.printerId,
                        @class = "form-control"
                    })

                    </div>

                    <button id="btnPrintBox" class="btn btn-primary" type="submit">Print</button>

                </form>
                <small>
                    <em>
                        *Last UCC printed on @Html.DisplayFor(m => m.LastUccPrintedDate) by @Html.DisplayFor(m => m.LastUccPrintedBy)
                        <br />
                        *Last CCL printed on @Html.DisplayFor(m => m.LastCclPrintedDate) by @Html.DisplayFor(m => m.LastCclPrintedBy)
                    </em>
                </small>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->

    </div>

    <ul class="list-group">
        <li class="list-group-item list-group-item-success">
            <span class="badge pull-right">Total Pieces @Model.SkuWithEpc.Sum(m => m.Pieces)<span> of </span> @Model.SkuWithEpc.Sum(m => m.ExpectedPieces)</span>
            <h4>
                SKUs in Box &bull;
                <abbr title="Virtual Warehouse">@Html.DisplayFor(m => m.VwhId)</abbr> 
            </h4>
        </li>
        @for (var i = 0; i < Model.SkuWithEpc.Count; ++i)
        {
            <li class="list-group-item">
                <span class="badge pull-right">Pieces @Model.SkuWithEpc[i].DisplayPieces</span>
                <h4 class="list-group-item-heading">
                    @(i + 1)) @Html.ActionLink(Model.SkuWithEpc[i].DisplaySku, MVC_Inquiry.Inquiry.SkuEntity.Sku(Model.SkuWithEpc[i].SkuId))
                    <small>$ Price @Model.SkuWithEpc[i].ExtendedPrice</small>
                </h4>
                <p class="list-group-item-text">
                    @if (!hasEpc)
                    {
                        for (var j = 0; j < Model.SkuWithEpc[i].AllEpc.Count; j++)
                        {
                            <span>EPC @Html.DisplayFor(m => m.SkuWithEpc[i].AllEpc[j])</span>
                        }
                    }
                </p>
            </li>
        }
    </ul>
     <h3>Box Audit</h3>
        <ul class="list-group">
           

        <li class="list-group-item list-group-item-success">
            <span class="badge pull-right">Module Code</span>
            <h4 class="list-group-item-heading">
                Action
                <small>&bull; Date &bull; User</small>
            </h4>
            <p class="list-group-item-text">
                <span class="text-info">Area From  &rarr; To</span>
                <span class="text-success">&bull; Location From &rarr; To</span>
                <span class="text-default">&bull; Pallet From &rarr; To</span>
            </p>
        </li>@for (var i = 0; i < Model.AuditList.Count; ++i)
        {
            <li class="list-group-item">
                <span class="badge pull-right">@Html.DisplayFor(m => m.AuditList[i].ModuleCode)</span>
                <h4 class="list-group-item-heading">
                    @(i + 1)) @Html.DisplayFor(m => m.AuditList[i].ActionPerformed)
                    <small>
                        &bull; @Html.DisplayFor(m => m.AuditList[i].DateCreated) &bull; @Html.DisplayFor(m => m.AuditList[i].CreatedBy)

                        <em>&bull; QC Rejection Code: @Html.DisplayFor(m => m.AuditList[i].RejectionCode)</em>
                    </small>
                </h4>
                <p class="list-group-item-text">
                    <span class="text-info">@Html.DisplayFor(m => m.AuditList[i].FromIaId)  &rarr; @Html.DisplayFor(m => m.AuditList[i].ToIaId)</span>
                    <span class="text-success">&bull; @Html.DisplayFor(m => m.AuditList[i].FromLocation) &rarr; @Html.DisplayFor(m => m.AuditList[i].ToLocation)</span>
                    <span class="text-default">&bull; @Html.DisplayFor(m => m.AuditList[i].FromPallet) &rarr; @Html.DisplayFor(m => m.AuditList[i].ToPallet)</span>

                </p>
            </li>
        }
    </ul>
</div>


using DcmsMobile.Inquiry.Helpers;
using EclipseLibrary.Oracle;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Caching;
using System.Web;

namespace DcmsMobile.Inquiry.Areas.Inquiry.Home
{
    internal class HomeRepository : IDisposable
    {
        private readonly OracleDatastore _db;

        public HomeRepository(TraceContext trace)
        {
            var connectStringName = "dcms8";
            Contract.Assert(ConfigurationManager.ConnectionStrings[connectStringName] != null);
            var store = new OracleDatastore(trace);
            store.CreateConnection(ConfigurationManager.ConnectionStrings[connectStringName].ConnectionString, string.Empty);
            store.ModuleName = "Inquiry";
            _db = store;
        }

        public void Dispose()
        {
            var dis = _db as IDisposable;
            if (dis != null)
            {
                dis.Dispose();
            }
        }

        /// <summary>
        /// Queries the passed text against the database.
        /// </summary>
        /// <param name="scan"></param>
        /// <returns></returns>
        internal IList<SearchQueryResult> ParseScan(string scan)
        {
            long intParam = 0;
            //var b = !scan.StartsWith("0") && int.TryParse(scan, out intParam);
            var isNumericScan = !scan.StartsWith("0") && long.TryParse(scan, out intParam);
            //var binder = new SqlBinder<ScanInfo>("Scan Type", true);
            var binder = SqlBinder.Create(row => new SearchQueryResult
            {
                RoutingId = row.GetInteger(0) ?? 0,
                Id = row.GetString(1),
                ScanDescription = row.GetString(2),
                PrimaryKey1 = row.GetString(3),
                PrimaryKey2 = row.GetString(4),
            });
            binder.Parameter("search_text", scan);
            binder.Parameter("int_value", isNumericScan ? intParam : (long?)null);

            var queries = from routing in SearchRoutingList
                          let isNumericQuery = System.Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf(routing.SearchAttr.Query, ":int_value", CompareOptions.IgnoreCase) >= 0
                          where isNumericScan || !isNumericQuery
                          select string.Format(routing.SearchAttr.Query, routing.SearchAttr.RoutingId);

            var queryText = string.Join(" UNION ALL ", queries);

            var results = _db.ExecuteReader(queryText, binder, 1000);

            return results; // query.ToArray();
        }

        public static IList<SearchRouting> SearchRoutingList
        {
            get
            {
                const string cacheKey = "Inquiry_SearchQueries";
                var queryScan = MemoryCache.Default[cacheKey] as IList<SearchRouting>;
                if (queryScan == null)
                {
                    queryScan = (
                        from controllerType in typeof(HomeRepository).Assembly.GetTypes()
                        where controllerType.IsSubclassOf(typeof(InquiryControllerBase)) &&
                            // Exclude controllers generated by T4MVC
                             controllerType.GetCustomAttribute(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), true) == null
                        let i = controllerType.Name.IndexOf("Controller")
                        // Only controllers whose name ends with "Controller"
                        where i > 0
                        from action in controllerType.GetMethods()
                        from SearchQueryAttribute queryAttr in action.GetCustomAttributes(typeof(SearchQueryAttribute), false)
                        select new SearchRouting
                        {
                            ControllerName = controllerType.Name.Substring(0, i),
                            ActionName = action.Name,
                            SearchAttr = queryAttr
                        }).ToList();
                    MemoryCache.Default.Add(cacheKey, queryScan, new CacheItemPolicy
                    {
                        SlidingExpiration = TimeSpan.FromHours(1)
                    });
                }
                return queryScan;
            }
        }
    }
}
using DcmsMobile.Inquiry.Helpers;
using EclipseLibrary.Mvc;
using System;
using System.Linq;
using System.Reflection;
using System.Web.Mvc;
using System.Web.Mvc.Routing;
using System.Web.Routing;

namespace DcmsMobile.Inquiry
{
    public class MvcApplication : System.Web.HttpApplication
    {


        protected void Application_Start()
        {
            //HostingEnvironment.RegisterVirtualPathProvider(new VirtualPathProviderEx("../DcmsMobile", new[] {
            //    T4MVCHelpers.ProcessVirtualPath("~/Content"),
            //    T4MVCHelpers.ProcessVirtualPath("~/Scripts"),
            //    T4MVCHelpers.ProcessVirtualPath("~/MainArea"),
            //    T4MVCHelpers.ProcessVirtualPath("~/fonts")
            //}));

            RouteTable.Routes.MapMvcAttributeRoutes(new MyRouteProvider());
            AreaRegistration.RegisterAllAreas();
            //this.Context.SkipAuthorization = true;

            ViewEngines.Engines.Clear();
            // Some Area folders follow MVC conventions, while others follow feature folder convention
            ViewEngines.Engines.Add(new FeatureFolderViewEngine(AreaFolderOrganization.FeatureFolders));

#if DEBUG
            // Return all actions which do not have Route attribute
            var query = from controllerType in typeof(InquiryControllerBase).Assembly.GetTypes()
                        where controllerType.IsSubclassOf(typeof(InquiryControllerBase)) &&
                            !controllerType.IsAbstract &&
                            // Exclude controllers generated by T4MVC
                             controllerType.GetCustomAttribute(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), true) == null
                        from action in controllerType.GetMethods()
                        where typeof(ActionResult).IsAssignableFrom(action.ReturnType) &&
                            action.GetCustomAttribute(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), true) == null &&
                            action.IsPublic && !action.IsStatic && action.MemberType == MemberTypes.Method && action.IsVirtual &&
                            action.GetCustomAttribute(typeof(RouteAttribute), true) == null
                        select string.Format("RouteAttribute missing on {0}.{1}", action.DeclaringType.FullName, action.Name);

            var errors = string.Join(Environment.NewLine, query);
            if (!string.IsNullOrWhiteSpace(errors))
            {
                throw new InvalidOperationException(errors);
            }
#endif
        }

#if DEBUG
        /// <summary>
        /// Bypasses login when the app is run directly, but only in debug mode
        /// </summary>
        protected void Application_AuthenticateRequest()
        {
            this.Context.SkipAuthorization = true;
        }
#endif

    }

    internal class MyRouteProvider : DefaultDirectRouteProvider
    {
        protected override string GetAreaPrefix(ControllerDescriptor controllerDescriptor)
        {
            return string.Empty;  // Ignore area prefix when app is being run directly. This makes it possible to reach the right page with the URL http://localhost
        }
    }

}

// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace DcmsMobile.Inquiry.Areas.Inquiry.PickslipEntity
{
    public partial class PickslipEntityController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PickslipEntityController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PickslipEntityController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Pickslip()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pickslip);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PrintPackingSlip()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PrintPackingSlip);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PickslipExcel()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipExcel);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PickslipImported()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipImported);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PoImportedExcel()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PoImportedExcel);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PickslipImportedExcel()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipImportedExcel);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportedPo()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportedPo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Po()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Po);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PoExcel()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PoExcel);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Wave()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Wave);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PickslipEntityController Actions { get { return MVC_Inquiry.Inquiry.PickslipEntity; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Inquiry";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PickslipEntity";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "PickslipEntity";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Pickslip = "Pickslip";
            public readonly string PrintPackingSlip = "PrintPackingSlip";
            public readonly string PickslipExcel = "PickslipExcel";
            public readonly string PickslipImported = "PickslipImported";
            public readonly string PoImportedExcel = "PoImportedExcel";
            public readonly string PickslipImportedExcel = "PickslipImportedExcel";
            public readonly string ImportedPo = "ImportedPo";
            public readonly string Po = "Po";
            public readonly string PoExcel = "PoExcel";
            public readonly string Wave = "Wave";
            public readonly string PickslipList = "PickslipList";
            public readonly string WaveList = "WaveList";
            public readonly string PoList = "PoList";
            public readonly string GetRecentOrders = "GetRecentOrders";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Pickslip = "Pickslip";
            public const string PrintPackingSlip = "PrintPackingSlip";
            public const string PickslipExcel = "PickslipExcel";
            public const string PickslipImported = "PickslipImported";
            public const string PoImportedExcel = "PoImportedExcel";
            public const string PickslipImportedExcel = "PickslipImportedExcel";
            public const string ImportedPo = "ImportedPo";
            public const string Po = "Po";
            public const string PoExcel = "PoExcel";
            public const string Wave = "Wave";
            public const string PickslipList = "PickslipList";
            public const string WaveList = "WaveList";
            public const string PoList = "PoList";
            public const string GetRecentOrders = "GetRecentOrders";
        }


        static readonly ActionParamsClass_Pickslip s_params_Pickslip = new ActionParamsClass_Pickslip();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Pickslip PickslipParams { get { return s_params_Pickslip; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Pickslip
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_PrintPackingSlip s_params_PrintPackingSlip = new ActionParamsClass_PrintPackingSlip();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PrintPackingSlip PrintPackingSlipParams { get { return s_params_PrintPackingSlip; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PrintPackingSlip
        {
            public readonly string pickslipId = "pickslipId";
            public readonly string printerid = "printerid";
            public readonly string numberOfCopies = "numberOfCopies";
            public readonly string printMasterPackingslip = "printMasterPackingslip";
            public readonly string printPackingSlip = "printPackingSlip";
        }
        static readonly ActionParamsClass_PickslipExcel s_params_PickslipExcel = new ActionParamsClass_PickslipExcel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PickslipExcel PickslipExcelParams { get { return s_params_PickslipExcel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PickslipExcel
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_PickslipImported s_params_PickslipImported = new ActionParamsClass_PickslipImported();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PickslipImported PickslipImportedParams { get { return s_params_PickslipImported; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PickslipImported
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_PoImportedExcel s_params_PoImportedExcel = new ActionParamsClass_PoImportedExcel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PoImportedExcel PoImportedExcelParams { get { return s_params_PoImportedExcel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PoImportedExcel
        {
            public readonly string id = "id";
            public readonly string pk1 = "pk1";
        }
        static readonly ActionParamsClass_PickslipImportedExcel s_params_PickslipImportedExcel = new ActionParamsClass_PickslipImportedExcel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PickslipImportedExcel PickslipImportedExcelParams { get { return s_params_PickslipImportedExcel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PickslipImportedExcel
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ImportedPo s_params_ImportedPo = new ActionParamsClass_ImportedPo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportedPo ImportedPoParams { get { return s_params_ImportedPo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportedPo
        {
            public readonly string id = "id";
            public readonly string pk1 = "pk1";
        }
        static readonly ActionParamsClass_Po s_params_Po = new ActionParamsClass_Po();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Po PoParams { get { return s_params_Po; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Po
        {
            public readonly string id = "id";
            public readonly string pk1 = "pk1";
            public readonly string pk2 = "pk2";
        }
        static readonly ActionParamsClass_PoExcel s_params_PoExcel = new ActionParamsClass_PoExcel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PoExcel PoExcelParams { get { return s_params_PoExcel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PoExcel
        {
            public readonly string id = "id";
            public readonly string pk1 = "pk1";
            public readonly string pk2 = "pk2";
        }
        static readonly ActionParamsClass_Wave s_params_Wave = new ActionParamsClass_Wave();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Wave WaveParams { get { return s_params_Wave; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Wave
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _pickslipListPartial = "_pickslipListPartial";
                public readonly string Pickslip = "Pickslip";
                public readonly string PickslipImported = "PickslipImported";
                public readonly string PickslipList = "PickslipList";
                public readonly string PO = "PO";
                public readonly string POImported = "POImported";
                public readonly string PoList = "PoList";
                public readonly string Wave = "Wave";
                public readonly string WaveList = "WaveList";
            }
            public readonly string _pickslipListPartial = "~/Areas/Inquiry/PickslipEntity/_pickslipListPartial.cshtml";
            public readonly string Pickslip = "~/Areas/Inquiry/PickslipEntity/Pickslip.cshtml";
            public readonly string PickslipImported = "~/Areas/Inquiry/PickslipEntity/PickslipImported.cshtml";
            public readonly string PickslipList = "~/Areas/Inquiry/PickslipEntity/PickslipList.cshtml";
            public readonly string PO = "~/Areas/Inquiry/PickslipEntity/PO.cshtml";
            public readonly string POImported = "~/Areas/Inquiry/PickslipEntity/POImported.cshtml";
            public readonly string PoList = "~/Areas/Inquiry/PickslipEntity/PoList.cshtml";
            public readonly string Wave = "~/Areas/Inquiry/PickslipEntity/Wave.cshtml";
            public readonly string WaveList = "~/Areas/Inquiry/PickslipEntity/WaveList.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PickslipEntityController : DcmsMobile.Inquiry.Areas.Inquiry.PickslipEntity.PickslipEntityController
    {
        public T4MVC_PickslipEntityController() : base(Dummy.Instance) { }

        [NonAction]
        partial void PickslipOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Pickslip(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pickslip);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            PickslipOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void PrintPackingSlipOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long pickslipId, string printerid, int numberOfCopies, bool printMasterPackingslip, bool printPackingSlip);

        [NonAction]
        public override System.Web.Mvc.ActionResult PrintPackingSlip(long pickslipId, string printerid, int numberOfCopies, bool printMasterPackingslip, bool printPackingSlip)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PrintPackingSlip);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pickslipId", pickslipId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "printerid", printerid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "numberOfCopies", numberOfCopies);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "printMasterPackingslip", printMasterPackingslip);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "printPackingSlip", printPackingSlip);
            PrintPackingSlipOverride(callInfo, pickslipId, printerid, numberOfCopies, printMasterPackingslip, printPackingSlip);
            return callInfo;
        }

        [NonAction]
        partial void PickslipExcelOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long id);

        [NonAction]
        public override System.Web.Mvc.ActionResult PickslipExcel(long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipExcel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            PickslipExcelOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void PickslipImportedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult PickslipImported(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipImported);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            PickslipImportedOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void PoImportedExcelOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string pk1);

        [NonAction]
        public override System.Web.Mvc.ActionResult PoImportedExcel(string id, string pk1)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PoImportedExcel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk1", pk1);
            PoImportedExcelOverride(callInfo, id, pk1);
            return callInfo;
        }

        [NonAction]
        partial void PickslipImportedExcelOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long id);

        [NonAction]
        public override System.Web.Mvc.ActionResult PickslipImportedExcel(long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipImportedExcel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            PickslipImportedExcelOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ImportedPoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string pk1);

        [NonAction]
        public override System.Web.Mvc.ActionResult ImportedPo(string id, string pk1)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportedPo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk1", pk1);
            ImportedPoOverride(callInfo, id, pk1);
            return callInfo;
        }

        [NonAction]
        partial void PoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string pk1, int pk2);

        [NonAction]
        public override System.Web.Mvc.ActionResult Po(string id, string pk1, int pk2)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Po);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk1", pk1);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk2", pk2);
            PoOverride(callInfo, id, pk1, pk2);
            return callInfo;
        }

        [NonAction]
        partial void PoExcelOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string pk1, int? pk2);

        [NonAction]
        public override System.Web.Mvc.ActionResult PoExcel(string id, string pk1, int? pk2)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PoExcel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk1", pk1);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pk2", pk2);
            PoExcelOverride(callInfo, id, pk1, pk2);
            return callInfo;
        }

        [NonAction]
        partial void WaveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Wave(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Wave);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            WaveOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void PickslipListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult PickslipList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PickslipList);
            PickslipListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void WaveListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult WaveList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WaveList);
            WaveListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void PoListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult PoList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PoList);
            PoListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetRecentOrdersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetRecentOrders()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetRecentOrders);
            GetRecentOrdersOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114

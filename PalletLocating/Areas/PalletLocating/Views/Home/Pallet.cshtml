@model DcmsMobile.PalletLocating.ViewModels.PalletViewModel
@{
    ViewBag.Title = "Scan Pallet";
    var query = from loc in Model.SuggestedLocations
                group loc by new
                {
                    SourceLocationId = loc.PalletLocationId,
                    SkuToPull = loc.SkuToPull.SkuId
                } into g
                let qualifyingPallets = g.Select(p => p.PalletIdToPull).Distinct().Count()
                let skuPriority = g.Select(p => p.SkuPriority).First()
                let cartonsAtDestLoc = g.Select(p => p.CartonCountAtDestinationLocation).First()
                let maxSpaceAtDest = g.Max(p => p.MaxCartonsAtDestinationLocation - p.CartonCountAtDestinationLocation)
                orderby skuPriority descending, cartonsAtDestLoc, maxSpaceAtDest descending, g.Key.SourceLocationId
                select new
                {
                    SourceLocation = new
                    {
                        LocationId = g.Key.SourceLocationId,
                        QualifyingPalletCount = string.Format("{0:N0}", qualifyingPallets),
                    },
                    SkuToPull = g.Select(p => p.SkuToPull).First(),
                    VwhIdToPull = g.Select(p => p.VwhIdToPull).First(),
                    SkuPriority = skuPriority,
                    DestinationLocations = from item in g
                                           group item by item.DestinationLocationId into g2
                                           let cartonCount = g2.Select(p => p.CartonCountAtDestinationLocation).First()
                                           let availableCapacity = g2.Select(p => p.MaxCartonsAtDestinationLocation - p.CartonCountAtDestinationLocation).First()
                                           orderby cartonCount, availableCapacity, g2.Key
                                           select new
                                           {
                                               LocationId = g2.Key,
                                               CartonCount = string.Format("{0:N0}", cartonCount),
                                               CartonCapacity = string.Format("{0:N0}", g2.Select(p => p.MaxCartonsAtDestinationLocation).First()),
                                               AvailableCartonCapacity = string.Format("{0:N0}", availableCapacity),
                                               PercentFull = g2.Select(p => p.CartonCountAtDestinationLocation * 100 / p.MaxCartonsAtDestinationLocation).First()
                                           },
                    Pallets = g.Select(p => new
                    {
                        PalletId = p.PalletIdToPull,
                        CountCartons = string.Format("{0:N0}", p.CartonCountOnPallet)
                    }).Distinct().OrderByDescending(p => p.CountCartons).ThenBy(p => p.PalletId)
                };
                 

}
@section sidebar {
    <div class="box boxA">
        <div class="boxContent">
            @Html.Partial(MVC_PalletLocating.PalletLocating.Home.Views._palletFormPartial, Model)
            Scan the pallet to locate in @Html.DisplayFor(m => m.AreaShortName) <em>@Html.DisplayFor(m => m.ReplenishAreaShortName)</em>.
            Alternatively, scan any carton on pallet if the pallet sticker is not scannable.
        </div>
    </div>
    <div class="box boxB">
        <div class="boxContent">
            <p>
                @Html.ActionLink("Update Replenishment Suggestions",
                MVC_PalletLocating.PalletLocating.Home.PalletLink(Model.AreaId, false)) . This is
                useful if you have just created buckets or modified location assignments. The suggestions
                will be updated on every ringscanner.
            </p>
        </div>
    </div>
}
<div class="box">
    <div class="tabs">
        <label class="ui-button ui-widget ui-button-text-only ui-state-default">
            <span class="ui-button-text">@Html.DisplayFor(m => m.BuildingId)</span>
        </label>
        <span>&raquo;</span>
        <label class="ui-button ui-widget ui-button-text-only ui-state-default">
            <span class="ui-button-text">@Html.DisplayFor(m => m.AreaShortName) <em>@Html.DisplayFor(m => m.ReplenishAreaShortName)</em></span>
        </label>
        <span>&raquo;</span>
        <label class="ui-button ui-widget ui-button-text-only ui-state-active">
            <span class="ui-button-text">Pallet</span>
        </label>
        <span>&raquo;</span>
        <label class="ui-button ui-widget ui-button-text-only ui-state-default">
            <span class="ui-button-text">Location</span>
        </label>
    </div>
    @if (!Model.IsAreaNumbered)
    {
        <div>
            Since @Html.DisplayFor(m => m.AreaShortName) is an unnumbered area, you will not
            be asked to scan a location.
        </div>
    }
    @if (Model.SuggestedLocations.Count() > 0)
    {
        <br />
        <h2>
            <span class="ui-icon ui-icon-lightbulb" style="display: inline-block"></span>Replenishment
            Suggestions as of @Html.DisplayFor(m => m.SuggestionQueryTime)</h2>
        <div class="boxContent">
            <table>
                <caption>
                    <span style="font-size: 0.8em; font-style: normal" class="ui-priority-secondary"><span
                        class="ui-state-highlight">Highlighted locations</span> contain SKUs required by
                        open buckets</span>
                </caption>
                <thead>
                    <tr>
                        <th>
                            From @Model.ReplenishAreaShortName Loc
                        </th>
                        <th>
                            To @Model.AreaShortName Loc
                        </th>
                        <th>
                            Qualifying Pallets
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
        var i = 0;
                    }
                    @foreach (var loc in query)
                    {
                        <tr class="@(i % 2 == 0 ? "rowA" : "rowB")">
                            <td style="width: 12em; vertical-align: top">
                                <div class="ui-priority-primary" style="font-size: 1.1em; height: 1.4em">
                                    @(i + 1). <a href="@Url.Content(string.Format("~/Inquiry/CartonLocation/{0}", loc.SourceLocation.LocationId))" target="Inquiry">@loc.SourceLocation.LocationId</a>
                                </div>
                                <div style="height: 1.4em; margin-top: 4px">
                                    @loc.SourceLocation.QualifyingPalletCount pallets available
                                </div>
                                <div style="height: 1.4em; margin-top: 4px">
                                    SKU <em>@loc.SkuToPull.DisplaySku</em>
                                </div>
                                Vwh: <strong title="Virtual Warehouse">@loc.VwhIdToPull</strong>
                            </td>
                            <td style="width: 12em; vertical-align: top">
                                @{
                        var bFirst = true;
                                }
                                @foreach (var destloc in loc.DestinationLocations)
                                {
                                    if (bFirst)
                                    {
                                        bFirst = false;
                                    }
                                    else
                                    {
                                    <hr />
                                    }                                    
                                    <div class="ui-priority-primary @Html.Raw(loc.SkuPriority > 0 ? "ui-state-highlight" : "")"
                                     style="font-size: 1.1em; height: 1.4em" title="@string.Format("{0:N0} pieces needed to satisfy demand", loc.SkuPriority)">
                                        <a href="@Url.Content(string.Format("~/Inquiry/CartonLocation/{0}", destloc.LocationId))" target="Inquiry">@destloc.LocationId
                                        </a>
                                    </div>
                                    <div class="ui-progressbar ui-widget ui-widget-content ui-corner-all" style="position: relative;
                                    height: 1.1em;" title="@(destloc.PercentFull)% full. Number of cartons at this location as compared to the maximum capacity">
                                        @if (destloc.PercentFull > 0)
                                        {
                                            <div style="width: @string.Format("{0}%", destloc.PercentFull); position: absolute; left: 0px; top: 0px" class="ui-progressbar-value ui-widget-header ui-corner-left">
                                            </div>
                                        }
                                        <div class="ui-progressbar-value" style="width: 100%; position: absolute; left: 0px;
                                            top: 0px; font-size: 0.8em; margin-top: 1px; margin-left: 1px">
                                            @destloc.CartonCount of @destloc.CartonCapacity
                                            cartons at loc
                                        </div>
                                    </div>
                                    <div style="height: 1.4em; margin-top: 4px">
                                        <em>@destloc.AvailableCartonCapacity cartons needed </em>
                                    </div>
                                }
                            </td>
                            <td style="vertical-align: top">
                                <ol>
                                    @foreach (var pallet in loc.Pallets)
                                    {
                                        <li><a href="@Url.Content(string.Format("~/Inquiry/CartonPallet/{0}", pallet.PalletId))" target="Inquiry">
                                            <em>@pallet.PalletId</em></a>.
                                            @pallet.CountCartons cartons </li>
                                    }
                                </ol>
                            </td>
                        </tr>
                                    ++i;
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@*
    $Id$ 
    $Revision$
    $URL$
    $Header$
    $Author$
    $Date$
*@
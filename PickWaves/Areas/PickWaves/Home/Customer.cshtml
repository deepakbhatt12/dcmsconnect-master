<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@model DcmsMobile.PickWaves.Areas.PickWaves.Home.CustomerViewModel
@{
    ViewBag.Title = "Customer Summary";
    Layout = @MVC_PickWaves.PickWaves.SharedViews.Views._layoutPickWaves;
}
@helper TabDescription(DcmsMobile.PickWaves.Helpers.ProgressStage state)
{
    switch (state)
    {
        case DcmsMobile.PickWaves.Helpers.ProgressStage.Frozen:
            <p>
                Picking will not be performed on these pick waves. You will need to unfreeze them first.
            </p>
            break;

        case DcmsMobile.PickWaves.Helpers.ProgressStage.InProgress:
        <p>
            Check the picking progress using the progress bars displayed in the table. Go to the <em>Pick Wave List</em> of a customer to manage individual pick waves.
        </p>
            break;

        case DcmsMobile.PickWaves.Helpers.ProgressStage.Completed:
        <p>
            Picking for these pick waves has been completed. Hopefully, the progress bar is telling you that you did not have to undership anything.
        </p>
            break;

        default:
        <p>Internal Error. We are not sure what you are seeing</p>
            break;
    }
}

<div class="container">

    <h2 style="margin-top:0">
        @Html.DisplayFor(m => m.CountActivePickWaves) Active Pick Waves
        <small>
            @if (Model.IsCustomerFilterApplied)
            {

                <span>Showing for Customer @Model.SearchCustomerId @Html.ActionLink("Show all", MVC_PickWaves.PickWaves.Home.Customers())</span>

            }
            @if (Model.IsUserNameFilterApplied)
            {

                <span>Created by @Model.SearchUserName @Html.ActionLink("Show all", MVC_PickWaves.PickWaves.Home.Customers())</span>

            }
        </small>
    </h2>
    <p>
        
        If you know the Pick Wave Id, just search for it. To see pick waves created by you, search for your login name. Or choose a
        <abbr title="The number of pieces ordered by the customer are also displayed">Customer below</abbr>.
    </p>
    @if (!Model.IsAnyFilterApplied)
    {
        <fieldset>
            <ul class="list-inline">
                @for (var i = 0; i < Model.CustomerIdList.Count; ++i)
                {
                    <li class="@(i % 2 == 0 ? "bg-info" : null)"
                        style="width: 13em; -ms-text-overflow: ellipsis; -o-text-overflow: ellipsis; text-overflow: ellipsis;white-space:nowrap;overflow: hidden;"
                        title="@Model.CustomerIdList[i].CustomerName">
                        <span class="badge">@Html.DisplayFor(m => m.CustomerIdList[i].OrderedPieces)</span>
                        <a href="@Url.Action(MVC_PickWaves.PickWaves.Home.Customer(Model.CustomerIdList[i].CustomerId))">@Html.DisplayFor(m => m.CustomerIdList[i].CustomerName)</a>
                    </li>
                }
            </ul>

        </fieldset>
    }


    <div class="panel panel-info">
        <div class="panel-heading" style="padding:0;border-bottom:0" >
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                @if (Model.ImportedOrders.Count > 0)
                {
                    <li role="presentation" class="active">
                        <a href="#ToCreate" role="tab" data-toggle="tab" aria-controls="ToCreate">
                            To Create
                            <span class="badge" title="@Model.ImportedOrders.Count customers">
                                @Model.ImportedOrders.Count
                            </span>
                        </a>
                    </li>
                }
                @for (var i = 0; i < Model.BucketsByStatus.Count; ++i)
                {

                    <li role="presentation" @(Model.ImportedOrders.Count > 0 ? "" : i == 0 ? "class=active" : "")>
                        <a href="#@Model.BucketsByStatus.Keys[i].ToString()" aria-controls="@Model.BucketsByStatus.Keys[i].ToString()" role="tab" data-toggle="tab">
                            @Model.StateDisplayNames[Model.BucketsByStatus.Keys[i]]
                            <span class="badge" title="@Model.BucketsByStatus.Values[i].Count customers">
                                @Model.BucketsByStatus.Values[i].Count
                            </span>
                        </a>
                    </li>
                }

            </ul>
        </div>
        <div class="panel-body">
            <!-- Tab panes -->
            <div class="tab-content">
                @if (Model.ImportedOrders.Count > 0)
                {
                    <div id="ToCreate" role="tabpanel" class="tab-pane active">
                        <h4>Imported Order Summary</h4>
                        @if (Model.UserIsManager)
                        {

                            <p>Create new pick waves by clicking the Customer Id.</p>

                        }
                        else
                        {
                            <p>
                                To create new pick waves, login as a user who has <em>@Model.ManagerRoleName</em> role.
                            </p>
                        }

                        <ul class="list-group">
                            <li class="list-group-item list-group-item-success">
                                <div class="row">
                                    <div class="col-md-6">
                                        <span class="label label-default">
                                            Pickslips  @Html.DisplayFor(m => m.TotalImportedPickslipCount)
                                        </span>
                                        &nbsp;
                                         <span style="font-size:1.4em;" class="text-info">@Model.ImportedOrders.Count Customers</span>
                                        <small><em>&nbsp; Imported @Html.DisplayFor(m => m.ImportDateRange)</em></small>
                                    </div>
                                    <div class="col-md-3">
                                        <h4 class="list-group-item-heading" style="width:7em;text-align:right; display:inline-block">
                                            <span class="label label-success">
                                                Ordered  @Html.DisplayFor(m => m.TotalImportedDollarsOrdered)
                                            </span>
                                        </h4>
                                        <h4 class="list-group-item-heading" style="width:4em;text-align:right; display:inline-block">
                                            <span class="label label-success">
                                                @Html.DisplayFor(m => m.TotalImportedPiecesOrdered) Pieces
                                            </span>
                                        </h4>

                                    </div>
                                    <div class="col-md-3" style="text-align:right">
                                        <span class="badge">
                                            DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)
                                        </span>
                                        <span class="glyphicon glyphicon-sort-by-attributes-alt"></span>
                                    </div>
                                </div>
                            </li>

                            @for (var i = 0; i < Model.ImportedOrders.Count; ++i)
                            {
                                <li class="list-group-item">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <small>@(i + 1)</small>
                                            <span class="label label-default">@Html.DisplayFor(m => m.ImportedOrders[i].PickslipCount)</span>

                                            @if (Model.UserIsManager)
                                            {
                                                <a style="font-size:1.4em; @Html.Raw(Model.ImportedOrders[i].IsCustomerActive ? "" : "text-decoration:line-through")"
                                                   href="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.Index(Model.ImportedOrders[i].CustomerId))"
                                                   title="@string.Format("Create Pick Waves for {0}", Model.ImportedOrders[i].CustomerName)">
                                                    @Html.DisplayFor(m => m.ImportedOrders[i].CustomerId):
                                                </a>
                                                <small @Html.Raw(Model.ImportedOrders[i].InternationalFlag ? "class='bg-info' title='International customer'" : "")>
                                                    @if (Model.ImportedOrders[i].IsCustomerActive)
                                                    {
                                                        @Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)
                                                    }
                                                    else
                                                    {
                                                        <s title="This customer is inactive.">@Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)</s>
                                                    }
                                                </small>
                                            }
                                            else
                                            {
                                                <span style="font-size:1.4em;"> @Html.DisplayFor(m => m.ImportedOrders[i].CustomerId): </span>
                                                <small @Html.Raw(Model.ImportedOrders[i].InternationalFlag ? "class='bg-info' title='International customer'" : "")>
                                                    @if (Model.ImportedOrders[i].IsCustomerActive)
                                                    {
                                                        @Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)
                                                    }
                                                    else
                                                    {
                                                        <s title="This customer is inactive.">@Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)</s>
                                                    }
                                                </small>
                                            }
                                            <small>
                                                <em>@Html.DisplayFor(m => m.ImportedOrders[i].ImportDateRange)</em>
                                            </small>

                                        </div>
                                        <div class="col-md-3">
                                            <h4 class="list-group-item-heading" style="width:6em;text-align:right; display:inline-block">
                                                <span class="label label-success">
                                                    @Html.DisplayFor(m => m.ImportedOrders[i].DollarsOrdered)
                                                </span>
                                            </h4>
                                            <h4 class="list-group-item-heading" style="width:4em;text-align:right; display:inline-block">
                                                <span class="label label-success">
                                                    @Html.DisplayFor(m => m.ImportedOrders[i].PiecesOrdered)
                                                </span>
                                            </h4>
                                        </div>
                                        <div class="col-md-3" style="text-align:right">
                                            <span class="badge">
                                                @Html.DisplayFor(m => m.ImportedOrders[i].DcCancelDateRange)
                                            </span>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>

                    </div>
                }
                @for (var j = 0; j < Model.BucketsByStatus.Count; ++j)
                {
                    <div id="@Model.BucketsByStatus.Values[j][0].BucketStatus.ToString()" role="tabpanel" class="tab-pane @(Model.ImportedOrders.Count > 0 ? "" : j == 0 ? "active" : "")">

                        <h4>@Model.StateDisplayNames[Model.BucketsByStatus.Values[j][0].BucketStatus] Pick Waves</h4>


                        @TabDescription(Model.BucketsByStatus.Values[j][0].BucketStatus)


                        <ul class="list-group">
                            <li class="list-group-item list-group-item-success">
                                <div class="row">
                                    <div class="col-md-6">
                                        <span class="label label-info">
                                            Max priority @Model.BucketsByStatus.Values[j].Max(p => p.MaxPriorityId)
                                        </span>
                                        &nbsp;  
                                        <span style="font-size:1.4em;" class="text-info">
                                            @string.Format("{0:N0} Customers", Model.BucketsByStatus.Values[j].Count)
                                        </span>
                                            <span class="badge">
                                                @string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.BucketCount)) Waves
                                            </span>
</div>
                                    <div class="col-md-3">
                                        <div class="progress" style="margin-bottom:0">
                                            <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 50%">
                                                <span style="white-space:nowrap" class="text-info"> @string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.PickedPieces)) of @string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.UnpickedPieces + p.PickedPieces)) pieces picked</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <span style="white-space:nowrap"class="pull-right">
                                            <span class="badge">
                                                &nbsp; DC Cancel @{
                    var dr = new DcmsMobile.PickWaves.Helpers.DateRange
                    {
                        From = Model.BucketsByStatus.Values[j].Min(p => p.DcCancelDateRange.From),
                        To = Model.BucketsByStatus.Values[j].Max(p => p.DcCancelDateRange.To)
                    };
                                                } @dr
                                            </span><span class="glyphicon glyphicon-sort-by-attributes-alt"></span>
                                        </span>

                                    </div>
                                </div>
                            </li>
                            @for (var i = 0; i < Model.BucketsByStatus.Values[j].Count; ++i)
                            {
                                <li class="list-group-item">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <small> @(i + 1)</small>
                                            <span class="label label-info">
                                                @Html.DisplayFor(p => p.BucketsByStatus.Values[j][i].MaxPriorityId)
                                            </span>
                                            &nbsp;
                                            <a style="font-size:1.4em; @Html.Raw(Model.BucketsByStatus.Values[j][i].IsCustomerActive ? "" : "text-decoration:line-through")"
                                               href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.Index(Model.BucketsByStatus.Values[j][i].CustomerId,
                                                        Model.SearchUserName))" title="Wave List">
                                                @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CustomerId):
                                            </a>

                                            @if (Model.BucketsByStatus.Values[j][i].IsCustomerActive)
                                            {
                                                <span @Html.Raw(Model.BucketsByStatus.Values[j][i].IsCustomerActive ? "" : "class='bg-info' title='International customer'")>
                                                    @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CustomerName)
                                                </span>
                                            }
                                            else
                                            {
                                                <s title="This customer is inactive.">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CustomerName)</s>
                                            }
                                            <span class="badge">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].BucketCount)</span>
                                        </div>
                                        @*<div class="col-md-2">
                                                <div class="pull-right">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].BucketCount)</div>
                                            </div>*@
                                        <div class="col-md-3">
                                            @if (Model.BucketsByStatus.Values[j][i].UnpickedPieces > 0 || Model.BucketsByStatus.Values[j][i].PickedPieces > 0)
                                            {
                                                <div class="progress" style="margin-bottom:0">
                                                    <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: @Model.BucketsByStatus.Values[j][i].PercentPickedPieces%;overflow:visible; padding-left:1mm" title="@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].PickedPieces) of @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].OrderedPieces) pieces picked">
                                                        <span style="white-space:nowrap" class="text-info">
                                                            @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].PickedPieces) of  @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].OrderedPieces)
                                                            &bull; <em>@Model.BucketsByStatus.Values[j][i].PercentPickedPieces% picked</em>
                                                        </span>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.BucketsByStatus.Values[j][i].UncreatedPieces > 0)
                                            {
                                                if (Model.BucketsByStatus.Values[j][i].UncreatedPieces >= Model.BucketsByStatus.Values[j][i].OrderedPieces)
                                                {
                                                    <span class="text-info">
                                                        Boxes not created
                                                    </span>
                                                }
                                                else
                                                {
                                                    if (Model.BucketsByStatus.Values[j][i].BucketStatus == DcmsMobile.PickWaves.Helpers.ProgressStage.Frozen)
                                                    {
                                                    }
                                                    else
                                                    {
                                                        @* We never expect to see this message because we always create boxes for all pieces*@
                                                        <span class="text-danger">
                                                            @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].UncreatedPieces) pieces cancelled
                                                        </span>
                                                    }
                                                }
                                            }

                                        </div>
                                        <div class="col-md-3" style="text-align:right">
                                            <span class="badge">
                                                @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].DcCancelDateRange)
                                            </span>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>

                    </div>
                }

            </div>
        </div>
    </div>




</div>


@section script{
    @*<link type="text/css" href="@Links_PickWaves.Areas.PickWaves.Home.Home_Index_css" rel="stylesheet" />
        <script type="text/javascript" src="@Links_PickWaves.Areas.PickWaves.Home.Home_Index_js"></script>*@
}
@*
    $Id$
    $Revision$
    $URL$
    $Header$
    $Author$
    $Date$
*@

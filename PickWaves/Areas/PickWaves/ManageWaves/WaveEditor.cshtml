@model DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.WaveEditorViewModel

@{
    ViewBag.Title = "Edit Pick Wave # " + Model.BucketId;
    Layout = MVC_PickWaves.PickWaves.SharedViews.Views._layoutPickWaves;

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    var dict = new Dictionary<DcmsMobile.PickWaves.Helpers.BucketActivityType, string>
    {
        {DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching, "(Undecided)"},
        {DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling, "(No Pulling)"}
    };
}

<div class="container">
    <h2 style="margin-top:0">
        @ViewBag.Title
        <small>
            <a href="@Url.Action(MVC_PickWaves.PickWaves.Home.Search(Model.CustomerId))"
               title="See other pick waves of this customer">@Model.CustomerId:@Model.CustomerName</a>
        </small>
    </h2>

    <form action="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.UpdateWave())" method="post" class="form-horizontal" role="form">
        @Html.HiddenFor(m => m.BucketId)
        @Html.HiddenFor(m => m.CustomerId)
        <div class="form-group">
            <label class="col-sm-2 control-label">Name<sup>*</sup></label>
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.BucketName, new
   {
       size = 50,
       maxlength = 50,
       @class = "form-control"
   })

                @Html.ValidationMessageFor(m => m.BucketName, null, new
           {
               @class = "help-block"
           })
            </div>


        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label">Pitching</label>
            <div class="col-sm-8">
                @Html.DropDownListFor(m => m.PitchAreaId,
                         Model.PitchAreaList,
                         Model.PitchAreaList.Count == 0 ? "None available" : "Undecided", new { @class = "form-control" })
                <span class="help-block">The list contains only those pick areas in which some of the ordered SKUs are available</span>
            </div>
            <div class="col-sm-2">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.QuickPitch)
                        Quick Pitch
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label">Pitch Limit<sup>*</sup></label>
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.PitchLimit, new
                                                         {
                                                             size = 5,
                                                             maxlength = 5,
                                                             @class = "form-control"
                                                         })
                @Html.ValidationMessageFor(m => m.PitchLimit, null, new
           {
               @class = "help-block"
           })
            </div>
        </div>


        <div class="form-group">
            <label class="col-sm-2 control-label">Pulling</label>
            <div class="col-sm-8">
                @Html.DropDownListFor(m => m.PullAreaId,
                         Model.PullAreaList,
                         Model.PullAreaList.Count == 0 ? "None Available" : "Undecided", new { @class = "form-control" })
                <span class="help-block">The list contains only those carton areas in which some of the ordered SKUs are available</span>
            </div>
            <div class="col-sm-2">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.RequiredBoxExpediting)
                        Require Box Expediting
                    </label>

                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label">Remark</label>
            <div class="col-sm-10">
                @Html.TextAreaFor(m => m.BucketComment, new
            {
                maxlength = 128,
                @class = "form-control",
                placeholder = "Max 128 characters"
            })


                <span class="help-block">Remark will be shown in Wave Summary UI</span>

            </div>
        </div>
        @*<div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    @Html.CheckBoxFor(m => m.UnfreezeWaveAfterSave)
                    <label>
                        Unfreeze current pick wave after save.
                    </label>

                    <small class="help-block">
                        After Unfreezing, boxes will be created for this pick wave and it will become available for processing.
                        <br />
                        <em>
                            We will try to pull as many cartons as possible for <strong>@Model.PiecesIncomplete</strong>
                            pieces from pull area <strong>@Html.DisplayFor(m => m.PullAreaShortName)</strong>. Remaining pieces will be picked from pitch area
                            <strong>@Html.DisplayFor(m => m.PitchAreaShortName)</strong>.
                        </em>
                    </small>

                </div>
            </div>*@

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="submit" class="btn btn-default" name="@Html.NameFor(m => m.UnfreezeWaveAfterSave)" value="True">Save and Unfreeze</button>
                <a class="btn btn-link" href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WavePickslips(Model.BucketId))">Cancel</a>
            </div>
        </div>
    </form>
</div>

@section script {
    <!--Bundle for form validation-->
    <script src="@Links_PickWaves.Areas.PickWaves.ManageWaves.WaveEditor_js"></script>
}



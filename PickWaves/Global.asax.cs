using DcmsMobile.PickWaves.Helpers;
using EclipseLibrary.Mvc.Hosting;
using System;
using System.Reflection;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Routing;
using System.Linq;
using System.Web.Mvc.Routing;

namespace DcmsMobile.PickWaves
{
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    // visit http://go.microsoft.com/?LinkId=9394801

    public class MvcApplication : System.Web.HttpApplication
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(new HandleErrorAttribute());
        }

        //public static void RegisterRoutes(RouteCollection routes)
        //{
        //    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

        //    routes.MapRoute(
        //        "Default", // Route name
        //        "{controller}/{action}/{id}", // URL with parameters
        //        new { controller = MVC_PickWaves.PickWaves.Home.Name, action = MVC_PickWaves.PickWaves.Home.ActionNames.Index2, id = UrlParameter.Optional }, // Parameter defaults
        //        new string[] { typeof(DcmsMobile.PickWaves.Areas.PickWaves.Home.HomeController).Namespace } // Add Namespace of controller
        //    ).DataTokens.Add("area", MVC_PickWaves.PickWaves.Name);
        //}

        protected void Application_Start()
        {
            //HostingEnvironment.RegisterVirtualPathProvider(new VirtualPathProviderEx("../DcmsMobile", new[] {
            //  Links_PickWaves.Content.Url(),
            //  Links_PickWaves.Scripts.Url()
            //}));
            // Enabling Attribute routing
            RouteTable.Routes.MapMvcAttributeRoutes(new MyRouteProvider());

            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            //RegisterRoutes(RouteTable.Routes);

#if DEBUG
            // Return all actions which do not have Route attribute
            var query = from controllerType in typeof(PickWavesControllerBase).Assembly.GetTypes()
                        where controllerType.IsSubclassOf(typeof(PickWavesControllerBase)) &&
                            !controllerType.IsAbstract &&
                            // Exclude controllers generated by T4MVC
                             controllerType.GetCustomAttribute(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), true) == null
                        from action in controllerType.GetMethods()
                        where typeof(ActionResult).IsAssignableFrom(action.ReturnType) &&
                            action.GetCustomAttribute(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), true) == null &&
                            action.IsPublic && !action.IsStatic && action.MemberType == MemberTypes.Method && action.IsVirtual &&
                            action.GetCustomAttribute(typeof(RouteAttribute), true) == null
                            orderby action.DeclaringType.FullName, action.Name
                        select string.Format("RouteAttribute missing on {0}.{1}", action.DeclaringType.FullName, action.Name);

            var errors = string.Join(Environment.NewLine, query);
            if (!string.IsNullOrWhiteSpace(errors))
            {
                throw new InvalidOperationException(errors);
            }
#endif
        }

#if DEBUG
        /// <summary>
        /// Bypasses login when the app is run directly, but only in debug mode
        /// </summary>
        protected void Application_AuthenticateRequest()
        {
            this.Context.SkipAuthorization = true;
        }
#endif
    }

    internal class MyRouteProvider : DefaultDirectRouteProvider
    {
        protected override string GetAreaPrefix(ControllerDescriptor controllerDescriptor)
        {
            return string.Empty;  // Ignore area prefix when app is being run directly. This makes it possible to reach the right page with the URL http://localhost
        }
    }
}
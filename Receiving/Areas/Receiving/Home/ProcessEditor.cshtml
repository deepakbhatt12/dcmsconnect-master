@model DcmsMobile.Receiving.Areas.Receiving.Home.ProcessEditorViewModel
@{
    Layout = MVC_Receiving.Receiving.SharedViews.Views._layoutReceiving;
    ViewBag.Title = Model.ProcessId == null ? "Create Process" : string.Format("Edit Process #{0}", Model.ProcessId);
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

<div class="container">    
    <h2 style="margin-top:0">
        @ViewBag.Title
    </h2>

    @using (Html.BeginForm(MVC_Receiving.Receiving.Home.CreateUpdateProcess(), FormMethod.Post, new
    {
        @class = "form-horizontal",
        role = "form"
    }))
    {
        @Html.ValidationSummary("", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.ProcessId)
        <div class="form-group">
            <label for="ddlReceivingArea" class="col-sm-2 control-label">Receive In <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.GroupDropListFor(m => m.ReceivingAreaId, Model.ReceivingAreasList, "(Select Any Area)",
                new
                {
                    id = "ddlReceivingArea",
                    @class = "form-control"

                })
            </div>
        </div>
        <div class="form-group">
            <label for="ddlSpotCheckArea" class="col-sm-2 control-label">Spot Check Area <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.SpotCheckAreaId, Model.SpotCheckAreasList, "(Select Any Area)", new
           {
               id = "ddlSpotCheckArea",
               @class = "form-control"
           })
            </div>
        </div>
        <div class="form-group">
            <label for="ddlPriceSeasonCode" class="col-sm-2 control-label">Season Code</label>
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.PriceSeasonCode, Model.PriceSeasonCodeList, "(No Change)", new
           {
               id = "ddlPriceSeasonCode",
               @class = "form-control"

           })
                <span class="help-block">All received cartons will be stamped with this price season code</span>
            </div>
        </div>
        <div class="form-group">
            <label for="txtboxExpectedCarton" class="col-sm-2 control-label">Expected Cartons <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.ExpectedCartons, new
           {
               id = "txtboxExpectedCarton",
               maxlength = "5",
               @class = "form-control",
               type = "number",
               @required = "required",
               placeholder = "Number of cartons you expect to receive",
               title = "The number of cartons you expect to receive is used to display a progress bar as you receive",
               size = 4
           })
                @Html.ValidationMessageFor(m => m.ExpectedCartons, null, new
           {
               @class = "help-block"
           })

            </div>

            <label for="txtBoxPalletLimit" class="col-sm-2 control-label">Max Cartons Per Pallet</label>
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.PalletLimit, new
           {
               id = "txtBoxPalletLimit",
               maxlength = 4,
               @class = "form-control",
               type = "number",
               size = 4
           })
            </div>

        </div>

        <div class="form-group">
            <label for="txtBoxPro" class="col-sm-2 control-label">Pro # <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>

            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.ProNumber, new
           {
               id = "txtBoxPro",
               maxlength = "25",
               @class = "form-control",
               @required = "required"
           })
                @Html.ValidationMessageFor(m => m.ProNumber, null, new
           {
               @class = "help-block"
           })
            </div>

            <label for="tbProDate" class="col-sm-2 control-label">
                Pro Date <sup><i class="glyphicon glyphicon-asterisk"></i></sup>
            </label>
            <div class="col-sm-4">
      
                <input name="@Html.NameFor(m => m.ProDate)" value="@string.Format("{0:d}", Model.ProDate)"
                    placeholder="mm/dd/yyyy" id="tbProDate" size="10" class="form-control" type="date" required  />
                @Html.ValidationMessageFor(m => m.ProDate, null, new
           {
               @class = "help-block"
           })
            </div>
        </div>
        <div class="form-group">
            <label for="tbCarrier" class="col-sm-2 control-label">Carrier <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                <div class="input-group">
                    <input id="tbCarrier" 
                           class="form-control typeahead" value="@Model.CarrierDisplayName"
                            />
                    <span class="input-group-btn">
                        <span class="btn btn-default"><span class="glyphicon glyphicon-search"></span></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(m => m.CarrierId, null, new
           {
               @class = "help-block"
           })
                @Html.TextBoxFor(m => m.CarrierId, new
               {
                   id = "hfCarrierId",
                   style = "height:0; width:0; border:none"
               })
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                @if (Model.ProcessId.HasValue)
                {


                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Save and Receive</button>
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li><a href="@Url.Action(MVC_Receiving.Receiving.Home.Receiving(Model.ProcessId))">Receive without saving</a></li>
                        </ul>
                    </div>

                }
                else
                {
                    <button type="submit" class="btn btn-default">Create New</button>
                }
                <a href="@Url.Action(MVC_Receiving.Receiving.Home.Index())" class="btn btn-link">Cancel</a>
            </div>
        </div>

    }
</div>
@section script {

    <link href="@Links_Receiving.Areas.Receiving.SharedViews.typeahead_css" type="text/css" rel="stylesheet" />
    <script src="@Links_Receiving.Areas.Receiving.Home.ProcessEditor_js" type="text/javascript"></script>

    <script type="text/javascript">

    $(document).ready(function () {
            $('#tbCarrier').typeahead(null, {
                name: 'carriers',
                displayKey: 'label',
                source: function (query, cb) {   //carriers.ttAdapter(),
                    var url = '@Url.Action(MVC_Receiving.Receiving.Home.GetCarriers("~"))'.replace('~', query);
                    $.get(url).done(function (data, textStatus, jqXHR) {
                            this.cb(data);
                    }.bind({cb: cb})).fail(function (jqXHR, textStatus, errorThrown) {
                            if (jqXHR.status == 500) {
                                this.cb([{ label: 'Error ' + (jqXHR.responseText || errorThrown), value:'' }]);
                            } else {
                                this.cb([{ label: 'Http Error ' + jqXHR.status + ': ' + errorThrown + ' ' + this.url, value: '' }]);
                            }
                    }.bind({cb : cb, url: url}));
                },
                templates: {
                    empty: 'No matching carrier found'
                }
            }).on('typeahead:selected typeahead:autocompleted', function (e, sug, ds) {
                // Store the id of the selected carrier in the hdden field
                $('#hfCarrierId').val(sug.value);
            }).on('input', function (e) {
                // When user changes the carrier, empty the hidden field
                $('#hfCarrierId').val('');
            });

        });
    </script>
}
<!--$Id: _processPartial.cshtml 11704 2012-01-21 06:12:33Z rkandari $-->

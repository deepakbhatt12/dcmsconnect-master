@*
If drop down list is being created for SourceArea property, then the list is assumed to be SourceArea_List property
The list must be of type IDictionary<string, IEnumerable<SelectListItem>>

If NullDisplayText is defined, an extra entry is added to the front of the list
*@
@{
    var parentModel = ViewContext.Controller.ViewData.Model;
    if (parentModel.GetType() != ViewData.ModelMetadata.ContainerType)
    {
        throw new NotSupportedException();
    }
    var propList = ViewData.ModelMetadata.ContainerType.GetProperty(ViewData.ModelMetadata.PropertyName + "_List");
    if (propList == null)
    {
        throw new Exception(string.Format("Property {0}.{1} not found", ViewData.ModelMetadata.ContainerType, ViewData.ModelMetadata.PropertyName + "_List"));
    }
    IDictionary<string, IEnumerable<SelectListItem>> dictSource = (IDictionary<string, IEnumerable<SelectListItem>>)propList.GetValue(parentModel, null);

}
@helper MoreAttributes()
    {
        if (!string.IsNullOrEmpty(ViewBag.id))
        {
    @Html.Raw(string.Format("id=\"{0}\" ", ViewBag.id))
        }
        foreach (var attr in Html.GetUnobtrusiveValidationAttributes(string.Empty))
        {
    @Html.Raw(string.Format("{0}=\"{1}\" ", attr.Key, attr.Value))
        }
}
@if (ViewData.ModelMetadata.ShowForEdit)
{
    if (dictSource == null)
    {
        throw new Exception(string.Format("Value of {0}.{1} is null", ViewData.ModelMetadata.ContainerType, ViewData.ModelMetadata.PropertyName + "_List"));
    }    
    <div>
        @Html.Label(string.Empty)
        <select name="@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)" @MoreAttributes()>
            @if (!string.IsNullOrEmpty(ViewData.ModelMetadata.NullDisplayText) && (!dictSource.ContainsKey("") || dictSource[""].Count() > 1))
            {
                <option value="">@ViewData.ModelMetadata.NullDisplayText</option>
            }
            @if (dictSource.ContainsKey(""))
            {
                foreach (var item in dictSource[""])
                {
                <option value="@item.Value">@item.Text</option>
                }
            }
            @foreach (var group in dictSource.Where(p => !string.IsNullOrEmpty(p.Key)))
            {
                <optgroup label="@group.Key">
                    @foreach (var item in group.Value)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </optgroup>
            }
        </select>
        @if (ViewData.ModelMetadata.IsRequired)
        {
            <sup>*</sup>
        }
    </div>
    <div>
        @Html.ValidationMessage(string.Empty)
    </div>
}
else
{
    if (Model != null)
    {
@* Hidden field needs to store the value only if it is non null *@
    <input type="hidden" value="@Model" name="@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)" />
    }
}

@*Promises added by: Binay Bhushan 4th December 2012.

Following attributes are used in our code:
1. data-delete-url: We keep URL to unroute particular order,used by Routing script.
2. variable layoutResult and layoutView: used to provide reference of view "_layoutTabs" .
3. data-ship-address-url: We keep URL to fetch original and current address, used by Routing script.
4. data-key:keep the values of key which contains PoId,EdiId,Iteration and CustomerId for unroute order, used by Routing script.
5. data-carrier-autocomplete:We keep URL to fetch all carrier list for carrier autocomplete.
6. All checkboxes defined for RoutingEditor dialog should have id started with 'cb' and followed by the id of corresponding textbox.
7. data-validate-url:We keep URL to validate passed DC belongs to this customer of not,used by Routing script.

Used CSS class:
1. .text-changed: Line-through the deleted row(tr),used at Routing script.
2. .routing-editor, .address-editor: Used by Routing script to provide specific look to the RoutingEdditor dialog and Address dialog.
3. td.row-span[rowspan]: Used for make browser compatibility and provide specific look to those td on which "row-span" class used.
*@
@model DcmsMobile.Shipping.ViewModels.RoutingViewModel
@{
    ViewBag.Title = "Routing in Progress Orders";
    var k = 0;
}
@helper Highlight(DcmsMobile.Shipping.ViewModels.RoutingPoGroup group1, DcmsMobile.Shipping.ViewModels.RoutingPoGroup group2)
{
    if (group1 != null && group2 != null && group1.Equals(group2))
    {
    @:class="ui-state-highlight"
    }
}
@Html.StatusSummary()
@Html.ValidationSummary(true)
<div>
    <span class="ui-icon ui-icon-lightbulb" style="display: inline-block"></span>To
    enter routing information obtained from the customer click one of the buttons available in sidebar.
</div>
<br />
<span id="btnRoutingEditor" style="position: fixed; left: 2.5em; top: 48em">Routing Editor...</span>
@*<span id="btnAddress" style="position: fixed; left: 0.5em; top: 50em">Address Editor...</span>*@
@using (Html.BeginForm(MVC_Shipping.Shipping.Home.Routing(), FormMethod.Get, new
{
    id = "frmShowRouted"
}))
{ 
    <fieldset id="fldSetRoutingFilters">
        <legend>Filter Orders</legend>
        @Html.LabelFor(m => m.StartDate)
        <input id="tbStartDate" type="text" size="10" name="@Model.NameFor(m => m.StartDate)" data-calendar-img="@Links_Shipping.Areas.Shipping.Home.images.calendar_gif" />
        @Html.LabelFor(m => m.DcCancelDate)
        <input id="tbDcCancelDate" type="text" size="10" name="@Model.NameFor(m => m.DcCancelDate)" data-calendar-img="@Links_Shipping.Areas.Shipping.Home.images.calendar_gif" />
        <button id="btnApplyFilter" type="submit">Go</button>
    </fieldset>
    <blockquote>
        @Html.CheckBoxFor(m => m.ShowRoutedOrders, new
   {
       id = "cbShowRouted"
   })
        <label for="cbShowRouted">
            Show routed orders also. Useful if you want to change the routing information which
            you have already entered.
        </label>
        <input type = "hidden" name = "@Model.NameFor(m => m.PostedCustomerId)" value = "@Model.Summary.CustomerId" />
    </blockquote>   
    if (!string.IsNullOrEmpty(Model.StartDate.ToString()) || !string.IsNullOrEmpty(Model.DcCancelDate.ToString()))
    {   <span style="font-weight: bold">Filter:</span>
        if (!string.IsNullOrEmpty(Model.StartDate.ToString()))
        {
    <label>Start Date:</label> @Html.DisplayFor(m => m.StartDate)
        }
        if (!string.IsNullOrEmpty(Model.DcCancelDate.ToString()))
        {
    <label>DC Cancel Date:</label> @Html.DisplayFor(m => m.DcCancelDate)
        }
    <a href="@Url.Action(@MVC_Shipping.Shipping.Home.Routing(new DcmsMobile.Shipping.ViewModels.RoutingViewModel(Model.PostedCustomerId)))">Clear Date Filter</a>
    }
}
@if (Model.GroupedPoList.Count > 1)
{
    <fieldset>
        <legend>Go to ATS Date</legend>
        <dl id="quicklist">
            @for (var i = 0; i < Model.AtsDatesByBuilding.Count; ++i)
            {
                <dt>Building <em>@Html.DisplayFor(m => m.AtsDatesByBuilding.Keys[i])
                    @if (Model.AtsDatesByBuilding.Count > 1)
                    {
                        <a href="@Url.Action(MVC_Shipping.Shipping.Home.Routing(new DcmsMobile.Shipping.ViewModels.RoutingViewModel(Model.Summary.CustomerId, Model.AtsDatesByBuilding.Keys[i],Model.ShowRoutedOrders)))">
                           <span title="Only show POs having Building @Html.DisplayFor(m => m.AtsDatesByBuilding.Keys[i])">Only</span>
                        </a>
                    }
                </em></dt>
                <dd style="margin-left: 5em">
                    @for (var j = 0; j < Model.AtsDatesByBuilding.Values[i].Count; ++j)
                    {
                        <div style="white-space: nowrap; display: inline-block; width: 12em">
                            <a  href="#@Model.AtsDatesByBuilding.Values[i][j].HtmlId" @Highlight(Model.AtsDatesByBuilding.Values[i][j], Model.InitialGroup)>
                                @Html.DisplayFor(m => Model.AtsDatesByBuilding.Values[i][j].AtsDate)</a>
                        </div>
                    }
                </dd>
            }
        </dl>
    </fieldset>
}
@if (Model.BuildingId != null)
{
    <a href="@Url.Action(MVC_Shipping.Shipping.Home.Routing(new DcmsMobile.Shipping.ViewModels.RoutingViewModel(Model.Summary.CustomerId)))">
        <strong style="font-style: italic">Clear Building Filter</strong></a> 
}
<div id="divEdiList" data-delete-url="@Url.Action(MVC_Shipping.Shipping.Home.UndoRouting("~"))">
    @for (var i = 0; i < Model.GroupedPoList.Count; ++i)
    {
        <table id="@Model.GroupedPoList.Keys[i].HtmlId" style="width:100%">
            <caption @Highlight(Model.GroupedPoList.Keys[i], Model.InitialGroup)>
                Building:@Model.GroupedPoList.Keys[i].BuildingId - @Html.DisplayFor(m => m.GroupedPoList.Keys[i].PoCount)POs
                <br />
                ATS Date:<span @Html.Raw(Model.GroupedPoList.Keys[i].PoCancelToday == true ? "class='ui-state-error' title='ATS date of some POs in group has passed,but they do not have routing info yet.'" : "") >@Html.DisplayFor(m => Model.GroupedPoList.Keys[i].AtsDate)</span>
                <a href="#">Back to Top</a>
            </caption>
            <thead>
                <tr>
                    <th>#
                    </th>
                    <th>DC
                         <span style="display: inline-block" class="ui-icon ui-icon-circle-triangle-s" title="DC in ascending order"></span><sup>1</sup> 
                    </th>
                    <th>
                        <input type="checkbox" class="select-all" title="Select All/Clear" />
                        PO
                         <span style="display: inline-block" class="ui-icon ui-icon-circle-triangle-s" title="PO in ascending order"></span><sup>2</sup> 
                    </th>
                    <th>Start Date
                    </th>
                    <th>DC Cancel Date
                    </th>
                    <th>$ 
                    </th>
                    <th># Pieces
                    </th>
                    <th>Weight
                    </th>
                    <th>Volume
                    </th>
                    <th># Boxes
                    </th>
                    <th>Carrier                        
                    </th>
                    <th>Load
                    </th>
                    <th>Pickup Date
                    </th>
                    <th title="Use this if you do not want to route PO">Unroute
                    </th>
                </tr>
            </thead>
            <tbody class="tbody-order">
                @for (var j = 0; j < Model.GroupedPoList.Values[i].Count; ++j)
                {
                    <tr class="@(j % 2 == 0 ? "rowA" : "rowB")">
                        <td>
                            @(k + 1)
                        </td>
                        @if (j == 0 || Model.GroupedPoList.Values[i][j].CustomerDcId != Model.GroupedPoList.Values[i][j - 1].CustomerDcId)
                        {
                            var span = Model.GroupedPoList.Values[i].Skip(j).TakeWhile(p => p.CustomerDcId == Model.GroupedPoList.Values[i][j].CustomerDcId).Count();
                            <td rowspan="@span" class="row-span">
                                <label for="tbDC">@Html.DisplayFor(m => m.GroupedPoList.Values[i][j].CustomerDcId)</label>
                                <span class="ui-state-highlight ui-helper-hidden"></span>
                                @if (Model.GroupedPoList.Values[i][j].OriginalDCId != Model.GroupedPoList.Values[i][j].CustomerDcId)
                                {
                                    <span class="ui-icon ui-icon-info" style="display: inline-block" title="Routing has changed DC.Original DC: @Model.GroupedPoList.Values[i][j].OriginalDCId"></span>
                                }
                            </td>
                        }
                        <td class="routed-po">
                            <input type="checkbox" class="selected-po ui-helper-hidden" name="@Model.NameFor(m => m.SelectedKeys)" value="@Model.GroupedPoList.Values[i][j].Key"/>
                            @Model.GroupedPoList.Values[i][j].PoId
                             <span class="@(Model.GroupedPoList.Values[i][j].IsRouted ? "ui-icon ui-icon-check" : "")" style="display: inline-block;" title="@(Model.GroupedPoList.Values[i][j].IsRouted ? "PO has routing information":"")"></span>
                            @if (Model.GroupedPoList.Values[i][j].PoAlertMessages.Count > 0)
                            {
                                <span class="ui-icon ui-icon-alert" style="display: inline-block"></span>
                                <ol class="ui-helper-hidden">
                                    @foreach (var msg in Model.GroupedPoList.Values[i][j].PoAlertMessages)
                                    {
                                        <li>@msg</li>
                                    }
                                </ol>
                            }
                        </td>
                       @* <td>
                            <span class="ui-icon ui-icon-contact" data-ship-address-url="@Url.Action(MVC_Shipping.Shipping.Home.GetShippingAddress(Model.GroupedPoList.Values[i][j].Key))" style="display:inline-block; cursor:pointer" title="Click to see shipping address."></span>
                        </td>*@
                        <td>
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].StartDate)
                        </td>
                        <td>
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].DcCancelDate)
                        </td>
                        <td style="text-align: right">
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].TotalDollars)
                        </td>
                        <td style="text-align: right">
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].Pieces)
                        </td>
                        <td style="text-align: right">
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].Weight)
                        </td>
                        <td style="text-align: right">
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].Volume)
                        </td>
                        <td style="text-align: right">
                            @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].CountBoxesDisplay)
                        </td>
                        @if (j == 0 || Model.GroupedPoList.Values[i][j].CarrierId != Model.GroupedPoList.Values[i][j - 1].CarrierId)
                        {
                            var span = Model.GroupedPoList.Values[i].Skip(j).TakeWhile(p => p.CarrierId == Model.GroupedPoList.Values[i][j].CarrierId).Count();
                            <td rowspan="@span" class="row-span">
                                <label for="tbCarrier">@Model.GroupedPoList.Values[i][j].CarrierDisplay</label>
                                <span class="ui-state-highlight ui-helper-hidden"></span>
                                @if ( Model.GroupedPoList.Values[i][j].OriginalCarrierId != Model.GroupedPoList.Values[i][j].CarrierId)
                                {
                                    <span class="ui-icon ui-icon-info" style="display: inline-block" title="Routing has changed Carrier. Original carrier: @Model.GroupedPoList.Values[i][j].OriginalCarrierDisplay"></span>
                                }
                            </td>
                        }
                        <td>
                            <label for="tbLoad">@Model.GroupedPoList.Values[i][j].LoadId</label>
                            <span class="ui-state-highlight ui-helper-hidden"></span>
                        </td>
                        <td>
                            <label for="tbPickupDate">
                                @Html.DisplayFor(m => m.GroupedPoList.Values[i][j].PickUpDate)
                            </label>
                            <span class="ui-state-highlight ui-helper-hidden"></span>
                        </td>
                        <td style="text-align: center">
                            <div class="ui-icon ui-icon-close" style="display: inline-block;cursor:pointer" data-key="@Model.GroupedPoList.Values[i][j].Key"  title="Unroute PO:@Model.GroupedPoList.Values[i][j].PoId">
                            </div>
                        </td>
                    </tr>
                        k++;
                }
            </tbody>
            <tfoot>
                <tr class="ui-state-active" style="font-weight: bold">
                    <td colspan="5">Total
                    </td>
                    <td style="text-align: right">
                        @Html.DisplayFor(m => m.GroupedPoList.Keys[i].TotalDollarsOrdered)
                    </td>
                    <td style="text-align: right">
                        @Html.DisplayFor(m => m.GroupedPoList.Keys[i].TotalPieces)
                    </td>
                    <td style="text-align: right">
                        @Html.DisplayFor(m => m.GroupedPoList.Keys[i].TotalWeight)
                    </td>
                    <td style="text-align: right">
                        @Html.DisplayFor(m => m.GroupedPoList.Keys[i].TotalVolume)
                    </td>
                    <td style="text-align: right">
                        @Html.DisplayFor(m => m.GroupedPoList.Keys[i].TotalCountBoxes)
                    </td>
                    <td colspan="5"></td>
                </tr>
            </tfoot>
        </table>
    }
</div>

@if (Model.GroupedPoList.Count == 0 && !string.IsNullOrWhiteSpace(Model.Summary.CustomerId))
{
    <div>
        No orders have been routed yet. See <a href="@Url.Action(MVC_Shipping.Shipping.Home.Unrouted(new DcmsMobile.Shipping.ViewModels.UnroutedViewModel(Model.Summary.CustomerId)))">Unrouted</a> Orders.
    </div>
}
<div id="dlgRoutingEditor">
    @using (Html.BeginForm(MVC_Shipping.Shipping.Home.UpdateRouting()))
    {
        <div>
            <input type = "hidden" name = "@Model.NameFor(m => m.PostedCustomerId)" value = "@Model.Summary.CustomerId" />
            <input type="checkbox" id = "cbtbCarrier" name="@Model.NameFor(m => m.UpdateCarrier)" value="true" />
            <label for="tbCarrier">
                Carrier</label>
            <input type = "text"  id = "tbCarrier" size="15" maxlength="4" name ="@Model.NameFor(m => m.RoutingInfo.CarrierId)"  data-carrier-autocomplete="@Url.Action(MVC_Shipping.Shipping.AutoComplete.GetCarriers())" data-validate-carrier="@Url.Action(MVC_Shipping.Shipping.AutoComplete.ValidateCarrier("~"))"/>
            <span style="display: inline-block">&darr;</span>
            <span class="ui-icon ui-icon-comment" title="Carrier is not a part of BOL creation" style="display:inline-block"></span>
            <br />
            <input type="checkbox" id="cbtbLoad" name="@Model.NameFor(m => m.UpdateLoad)" value="true"  />
            <label for="tbLoad">
                Load</label>
            <input type = "text"  id = "tbLoad" size="15" maxlength="30" name ="@Model.NameFor(m => m.RoutingInfo.LoadId)" />
            <br />
            <input type="checkbox" id="cbtbDC" name="@Model.NameFor(m => m.UpdateDc)"  value="true" />
            <label for="tbDC">
                DC</label>
            <input type = "text"  id = "tbDC" size="15" maxlength="13" name ="@Model.NameFor(m => m.RoutingInfo.CustomerDcId)" data-validate-url="@Url.Action(MVC_Shipping.Shipping.Home.ValidateDC(Model.Summary.CustomerId,"~"))" />
            <br />
            <input type="checkbox" id="cbtbPickupDate" name="@Model.NameFor(m => m.UpdatePickUpDate)" value="true" />
            <label for="tbPickupDate">
                Pickup Date</label>
            <input type = "text"  id = "tbPickupDate" size="10" maxlength="10" name ="@Model.NameFor(m => m.RoutingInfo.PickUpDate)"
                    data-calendar-img="@Links_Shipping.Areas.Shipping.Home.images.calendar_gif"/>
             <span class="ui-icon ui-icon-comment" title="Pickup-date is not a part of BOL creation" style="display:inline-block"></span>
        </div>
    }
   
        <p>Select POs by using the check boxes or by dragging the selector within the PO column.</p><br />
        <p>To set original values for DC and Carrier leave textbox empty and check corresponding check box.</p>
    <div class="ui-state-highlight">
        <span class="spnPOSelected"></span>
    </div>
</div>

@*<div id="dlgOriginalAddress">
    <fieldset style="padding: 1em 1em 1em 1em; margin-bottom: 1em">
        <legend style="font-weight: bold">Original Shipping Address</legend>
        <div id="divOriginalAddress"></div>
    </fieldset>
    <fieldset style="padding: 1em 1em 1em 1em">
        <legend style="font-weight: bold">Current Shipping Address</legend>
        <div id="divCurrentAddress"></div>
    </fieldset>
</div>
<div id="dlgAddress">
    @using (Html.BeginForm(MVC_Shipping.Shipping.Home.UpdateRouting()))
    {
        <div>
            <input type="hidden" name="@Model.NameFor(m => m.UpdateAddress)" value="true" />
            <input type = "hidden" name = "@Model.NameFor(m => m.PostedCustomerId)" value = "@Model.Summary.CustomerId" />
            <label for="tbAddress">
                Routing Address</label><sup>*</sup>
            <textarea id="tbAddress"  rows="4" cols="40" maxlength="160" name="@Model.NameFor(m => m.Address)" class="required"></textarea><br />
            <table border="0">
                <tbody>
                    <tr>
                        <td>
                            <label>City</label>
                            <input type="text" size="10" maxlength="40" name="@Model.NameFor(m => m.City)" class="required" /></td>
                        <td>
                            <label>State</label>
                            <input type="text" size="10" maxlength="30" name="@Model.NameFor(m => m.State)" class="required" /></td>
                        <td>
                            <label>Zip</label>
                            <input type="text" size="6" maxlength="10" name="@Model.NameFor(m => m.ZipCode)" class="required"/></td>
                        <td>
                            <label>Country</label>
                            <input type="text" size="5" maxlength="3" name="@Model.NameFor(m => m.CountryCode)" class="required" /></td>
                    </tr>
                </tbody>
            </table>
            All fields are required
        </div>
    }
    <div class="ui-state-highlight">
        <span class="spnPOSelected"></span>
    </div>
</div>*@
@section sidebar{
    <div class="box boxB ">
        <div class="boxContent">
            <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-arrowreturnthick-1-w"></span>
            <a href= "@string.Format("{0}?customer_id={1}", Model.POslDetailUrl, Model.PostedCustomerId)" target="_poreport" title="Summary of POs for passed customer">Report 110.16</a>
        </div>
    </div>
    <h3>Legend</h3>
    <div class="boxContent">
        <span class="ui-icon ui-icon-info" style="display: inline-block"></span>Displays when routing information has changed.
    </div>

    @if (Model.GroupedPoList.SelectMany(p => p.Value).Any(p => p.PoAlertMessages.Count > 0) || Model.GroupedPoList.Keys.Any(p => p.PoCancelToday == true))
    {
        <div class="box">
            <div class="boxContent">
                <span class="ui-icon ui-icon-alert" style="display: inline-block"></span>Displays against unusual cases. Check tooltip for more info.
            </div>
        </div>
    }
}
@section scripts {
    <script src="@Links_Shipping.Areas.Shipping.Home.Scripts.Routing_js" type="text/javascript"></script>
    <style type="text/css">
        .routed-po {
            white-space: nowrap;
        }

        .text-changed {
            text-decoration: line-through;
        }

        .routing-editor {
            position: fixed;
        }

            .routing-editor label {
                display: inline-block;
                width: 6em;
                vertical-align: top;
                white-space: nowrap;
            }

        td.row-span[rowspan] {
            padding-top: 2mm;
            vertical-align: top;
            border-top: 1px solid;
            background-color: wheat;
        }

        #fldSetRoutingFilters label {
            display: inline-block;
            width: 9em;
            padding-bottom: 0.8em;
        }
    </style>
}
